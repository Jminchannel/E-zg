<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>4_基于XML的SpringIOC容器实践和应用</title>
    <link href="/2023/09/05/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/4_%E5%9F%BA%E4%BA%8EXML%E7%9A%84SpringIOC%E5%AE%B9%E5%99%A8/"/>
    <url>/2023/09/05/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/4_%E5%9F%BA%E4%BA%8EXML%E7%9A%84SpringIOC%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="4-SpringIOC容器实践和应用"><a href="#4-SpringIOC容器实践和应用" class="headerlink" title="4_SpringIOC容器实践和应用"></a>4_SpringIOC容器实践和应用</h1><ol><li>编写配置信息（元数据），配置文件（XML，注解，配置）</li><li>指定配置信息，实例化IOC容器对象</li><li>在Java代码中获取组件（Bean），使用组件</li></ol><h2 id="基于XML配置方式组件管理"><a href="#基于XML配置方式组件管理" class="headerlink" title="基于XML配置方式组件管理"></a>基于XML配置方式组件管理</h2><h3 id="组件信息声明配置IOC方式"><a href="#组件信息声明配置IOC方式" class="headerlink" title="组件信息声明配置IOC方式"></a>组件信息声明配置IOC方式</h3><ul><li><p>目标：SpringIOC管理一个或者多个bean。</p></li><li><p>思路：</p><p><img src="/assets/image-20230905083350701.png" alt="image-20230905083350701"></p></li></ul><blockquote><p>思考：在普通应用程序中实例对象有哪些方式？</p><p>答：1.构造函数实例化。（无参，有参实例化）（ioc）</p><p>​2.工厂模式实例化。（静态工厂，非静态工厂）(di)</p><p>不同实例化方式对象和组件，在IOC中的配置方式也不同！</p></blockquote><h4 id="基于无参构造函数"><a href="#基于无参构造函数" class="headerlink" title="基于无参构造函数"></a>基于无参构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HappyComponent</span> &#123;<br><br>    <span class="hljs-comment">//默认包含无参数构造函数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;HappyComponent.doWork&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>xml配置信息:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    可以使用无参数构造函数实例化组件--&gt;</span><br><span class="hljs-comment">&lt;!--    代表一个组件信息，一个组件对象，默认单例模式--&gt;</span><br><span class="hljs-comment">&lt;!--    id 组件的唯一标识，方便后期读取--&gt;</span><br><span class="hljs-comment">&lt;!--    class组件的类的权限定符--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HappyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc01.HappyComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HappyComponent2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc01.HappyComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于静态工厂方法实例化"><a href="#基于静态工厂方法实例化" class="headerlink" title="基于静态工厂方法实例化"></a>基于静态工厂方法实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ClientService</span> <span class="hljs-variable">clientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientService</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ClientService</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClientService <span class="hljs-title function_">createInstance</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> clientService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>xml配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    静态工程类声明工厂方法进行ioc配置 注意！实例方法必须是静态方法--&gt;</span><br><span class="hljs-comment">&lt;!--    factory-method指定静态工厂的实例化方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClientService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc01.ClientService&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createInstance&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于非静态工厂方法实例化"><a href="#基于非静态工厂方法实例化" class="headerlink" title="基于非静态工厂方法实例化"></a>基于非静态工厂方法实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultServiceLocator</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ClientServiceImpl</span> <span class="hljs-variable">clientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientServiceImpl</span>();<br><br>  <span class="hljs-keyword">public</span> ClientServiceImpl <span class="hljs-title function_">createClientServiceInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> clientService;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>xml配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    通过指定非静态工厂对象和方法名 注意！实例方法必须是非静态方法 配置生成的ioc信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DefaultServiceLocator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc01.DefaultServiceLocator&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClientServiceInstance&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;DefaultServiceLocator&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createClientServiceInstance&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230905094436916.png" alt="image-20230905094436916"></p><h3 id="组件依赖注入配置（DI）"><a href="#组件依赖注入配置（DI）" class="headerlink" title="组件依赖注入配置（DI）"></a>组件依赖注入配置（DI）</h3><ol><li><p>目标</p><p>通过配置文件，实现IOC容器中Bean之间的引用（依赖注入DI配置）。</p><p>主要涉及注入场景，基于构造函数的依赖注入和基于Setter的依赖注入。</p></li><li><p>思路</p><p><img src="/assets/image-20230905225535354.png" alt="image-20230905225535354"></p></li></ol><h4 id="基于构造函数的依赖注入（单个构造参数）"><a href="#基于构造函数的依赖注入（单个构造参数）" class="headerlink" title="基于构造函数的依赖注入（单个构造参数）"></a>基于构造函数的依赖注入（单个构造参数）</h4><p>   基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    引用和被引用的组件必须全部在ioc容器中--&gt;</span><br><span class="hljs-comment">&lt;!--    1 单个构造参数注入--&gt;</span><br><span class="hljs-comment">&lt;!--    构造userDao无参组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc02.UserDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc02.UserService&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        构造参数传值 di配置--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg&gt;</span><br><span class="hljs-comment">            value 直接属性值   String name,int age</span><br><span class="hljs-comment">            ref 引用其他bean beanId</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    注意点 SpringIOC容器是一个高级容器，内部会有缓存动作</span><br><span class="hljs-comment">        1. 创建对象[IOC]</span><br><span class="hljs-comment">        2. 属性赋值</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserService2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc02.UserService&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        构造参数传值 di配置--&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;constructor-arg&gt;</span><br><span class="hljs-comment">                    value 直接属性值   String name,int age</span><br><span class="hljs-comment">                    ref 引用其他bean beanId</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc02.UserDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于构造函数的依赖注入（多构造参数解析）"><a href="#基于构造函数的依赖注入（多构造参数解析）" class="headerlink" title="基于构造函数的依赖注入（多构造参数解析）"></a>基于构造函数的依赖注入（多构造参数解析）</h4><p>   基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(<span class="hljs-type">int</span> age , String name ,UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc03.UserDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc03.UserService&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        根据顺序填写构造参数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;23&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lm&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc03.UserService&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        根据参数的名称指定填写，不考虑顺序--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;32&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lzm&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc03.UserService&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        根据参数的下角标指定填写，不考虑顺序--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;13&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于Setter方法依赖注入"><a href="#基于Setter方法依赖注入" class="headerlink" title="基于Setter方法依赖注入"></a>基于Setter方法依赖注入</h4><p>   开发中除了构造函数注入DI更多使用Setter方法注入</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieFinder</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleMovieLister</span> &#123;<br><br>  <span class="hljs-keyword">private</span> MovieFinder movieFinder;<br>  <br>  <span class="hljs-keyword">private</span> String movieName;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMovieFinder</span><span class="hljs-params">(MovieFinder movieFinder)</span> &#123;<br>    <span class="hljs-built_in">this</span>.movieFinder = movieFinder;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMovieName</span><span class="hljs-params">(String movieName)</span>&#123;<br>    <span class="hljs-built_in">this</span>.movieName = movieName;<br>  &#125;<br><br>  <span class="hljs-comment">// business logic that actually uses the injected MovieFinder is omitted...</span><br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;movieFinder&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc04.MovieFinder&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simpleMovieLister&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc04.SimpleMovieLister&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        name Setter方法的去set和首字母小写的值--&gt;</span><br><span class="hljs-comment">&lt;!--        setMovieFinder--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieFinder&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;movieFinder&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;浪客剑心&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>依赖注入（DI）包含引用类型和基本数据类型，同时注入的方式也有多种！主流的注入方式为setter方法注入和构造函数注入</p></blockquote><p><strong>需要特别注意：引用其他bean，使用ref属性。直接注入基本类型值，使用value属性。</strong></p><h3 id="IOC容器创建和使用"><a href="#IOC容器创建和使用" class="headerlink" title="IOC容器创建和使用"></a>IOC容器创建和使用</h3><p>​想要配置文件中声明组件类信息真正的进行实例化成Bean对象和形成Bean之间的引用关系，我们需要声明IOC容器对象，读取配置文件，实例化组件和关系维护的过程都是在IOC容器中实现的！</p><h4 id="容器的实例化"><a href="#容器的实例化" class="headerlink" title="容器的实例化"></a>容器的实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1:实例化并且指定配置文件</span><br><span class="hljs-comment">//参数：String...locations 传入一个或者多个配置文件 该方法配置了刷新方法，不需要手动刷新</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;services.xml&quot;</span>, <span class="hljs-string">&quot;daos.xml&quot;</span>);<br>           <br><span class="hljs-comment">//方式2:先实例化，再指定配置文件，最后刷新容器触发Bean实例化动作 [springmvc源码和contextLoadListener源码方式]  </span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>();   <br><span class="hljs-comment">//设置配置配置文件,方法参数为可变参数,可以设置一个或者多个配置</span><br>iocContainer1.setConfigLocations(<span class="hljs-string">&quot;services.xml&quot;</span>, <span class="hljs-string">&quot;daos.xml&quot;</span>);<br><span class="hljs-comment">//后配置的文件,需要调用refresh方法,触发刷新配置,</span><br>iocContainer1.refresh();           <br><br></code></pre></td></tr></table></figure><h4 id="bean对象的获取"><a href="#bean对象的获取" class="headerlink" title="bean对象的获取"></a>bean对象的获取</h4><p><img src="/assets/image-20230906075910773.png" alt="image-20230906075910773"></p><p>注意！可以通过接口类来获取bean，在满足bean唯一性的前提下，其实：『对象 instanceof 指定的类型』的返回结果， 只要返回的是true就可以认定为和类型匹配，能够获取到</p><h3 id="高级特性：组件的作用域和周期方法配置"><a href="#高级特性：组件的作用域和周期方法配置" class="headerlink" title="高级特性：组件的作用域和周期方法配置"></a>高级特性：组件的作用域和周期方法配置</h3><h4 id="组件周期方法配置"><a href="#组件周期方法配置" class="headerlink" title="组件周期方法配置"></a>组件周期方法配置</h4><ol><li><p>周期方法概念</p><p>可在组件类中定义方法，然后当ioc容器实例化和销毁组件对象的时候进行调用，这两种方法是生命周期方法！</p></li><li><p>周期方法声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Javabean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;javabean.init&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;javabean.clean&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">    &lt;bean id=<span class="hljs-string">&quot;javabean&quot;</span> class=<span class="hljs-string">&quot;com.Jmin_ioc.ioc06.Javabean&quot;</span> init-method=<span class="hljs-string">&quot;init&quot;</span> destroy-method=<span class="hljs-string">&quot;clean&quot;</span>/&gt;<br>&lt;!--    init-method初始化方法名<br>        destroy-method 销毁方法--&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SpringInitAndDestroy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-06.xml&quot;</span>);<br>    context.getBean(<span class="hljs-string">&quot;javabean&quot;</span>);  <span class="hljs-comment">//完成初始化</span><br>    <span class="hljs-comment">//javabean.init</span><br>    context.close(); <span class="hljs-comment">//正常结束ioc容器之前调用destory()</span><br>    <span class="hljs-comment">//javabean.clean</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230906124317151.png" alt="image-20230906124317151"></p></li><li><p>周期方法配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javabean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc06.Javabean&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;clean&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    init-method初始化方法名</span><br><span class="hljs-comment">        destroy-method 销毁方法--&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="组件作用域配置"><a href="#组件作用域配置" class="headerlink" title="组件作用域配置"></a>组件作用域配置</h4><ol><li><p>bean作用域概念</p><p><code>&lt;bean</code> 标签声明Bean，只是将Bean的信息配置给SpringIoC容器！</p><p>在IoC容器中，这些<code>&lt;bean</code>标签对应的信息转成Spring内部 <code>BeanDefinition</code> 对象，<code>BeanDefinition</code> 对象内，包含定义的信息（id,class,属性等等）！</p><p><img src="/assets/image-20230906125718675.png" alt="image-20230906125718675"></p><p>这意味着，<code>BeanDefinition</code>与<code>类</code>概念一样，SpringIoC容器可以可以根据<code>BeanDefinition</code>对象反射创建多个Bean对象实例。</p><p>具体创建多少个Bean的实例对象，由Bean的作用域<code>Scope</code>属性指定！</p></li><li><p>作用域可选值</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>singleton（单例）</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td><td>是</td></tr><tr><td>prototype（多例）</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td><td>否</td></tr></tbody></table><p> 如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><table><thead><tr><th align="center">取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td align="center">request</td><td>请求范围内有效的实例</td><td>每次请求</td><td>否</td></tr><tr><td align="center">session</td><td>会话范围内有效的实例</td><td>每次会话</td><td>否</td></tr></tbody></table></li><li><p>作用域配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javabean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc06.Javabean&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;clean&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    init-method初始化方法名</span><br><span class="hljs-comment">        destroy-method 销毁方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc06.Javabean&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javabean2&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SpringInitAndDestroy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-06.xml&quot;</span>);<br>    <span class="hljs-type">Javabean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(Javabean.class);<br>    bean.setNum(<span class="hljs-number">12</span>);<br>    System.out.println(bean.getNum());<br>    <span class="hljs-type">Javabean</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> context.getBean(Javabean.class);<br>    System.out.println(bean2.getNum());<br>    context.close();<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SpringInitAndDestroy2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-06.xml&quot;</span>);<br>    <span class="hljs-type">Javabean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;javabean2&quot;</span>,Javabean.class);<br>    bean.setNum(<span class="hljs-number">12</span>);<br>    System.out.println(bean.getNum());<br>    <span class="hljs-type">Javabean</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;javabean2&quot;</span>,Javabean.class);<br>    System.out.println(bean2.getNum());<br>    context.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230906191506477.png" alt="image-20230906191506477"></p></li></ol><p><img src="/assets/image-20230906191652765.png" alt="image-20230906191652765"></p><h3 id="高级特性：FactoryBean特性和使用"><a href="#高级特性：FactoryBean特性和使用" class="headerlink" title="高级特性：FactoryBean特性和使用"></a>高级特性：FactoryBean特性和使用</h3><ol><li>简介</li></ol><p><img src="/assets/image-20230906193630652.png" alt="image-20230906193630652"></p><p><code>FactoryBean</code>接口是Spring IoC容器实例化逻辑的可插拨性点。</p><p>可用于配置复杂的Bean对象，可以将创建过程存储在<code>FactoryBean</code>的getObject方法。</p><p><code>FactoryBean&lt;T&gt;</code> 接口提供三种方法：</p><ul><li><p><code>T getObject()</code>: </p><p>  返回此工厂创建的对象的实例。该返回值会被存储到IoC容器！</p></li><li><p><code>boolean isSingleton()</code>: </p><p>  如果此 <code>FactoryBean</code> 返回单例，则返回 <code>true</code> ，否则返回 <code>false</code> 。此方法的默认实现返回 <code>true</code> （注意，lombok插件使用，可能影响效果）。</p></li><li><p><code>Class&lt;?&gt; getObjectType()</code>: </p><p>  返回 <code>getObject()</code> 方法返回的对象类型，如果事先不知道类型，则返回 <code>null</code> 。</p></li></ul><ol start="2"><li><p>使用场景：</p><ol><li>代理类的创建</li><li>第三方框架整合</li><li>复杂对象实例化等</li></ol></li><li><p>使用方法：</p><ol><li><p>创建需要实例化的类JavaBean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再创建实例化工厂类，实现<code>FactoryBean&lt;JavaBean&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBeanFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;JavaBean&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JavaBean <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        实例化</span><br>        <span class="hljs-type">JavaBean</span> <span class="hljs-variable">javaBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBean</span>();<br>        <span class="hljs-keyword">return</span> javaBean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javaBeanFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc07.JavaBeanFactoryBean&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    优势：将复杂的实例化方法在工厂中返回--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>检测是否成功实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">javaBeanFactoryTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-07.xml&quot;</span>);<br>    <span class="hljs-type">JavaBeanFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(JavaBeanFactoryBean.class);<br>    <span class="hljs-type">JavaBean</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> bean.getObject();<br>    System.out.println(<span class="hljs-string">&quot;javaBean is &quot;</span>+object);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230906203306946.png" alt="image-20230906203306946"></p></li></ol><p>复杂实例化，注入属性</p><ol start="2"><li><p>第一步如上，实例化工厂类，实现<code>FactoryBean&lt;JavaBean&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBeanFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;JavaBean&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JavaBean <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        实例化</span><br>        <span class="hljs-type">JavaBean</span> <span class="hljs-variable">javaBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBean</span>();<br>        javaBean.setName(name);<br>        <span class="hljs-keyword">return</span> javaBean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javaBeanFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc07.JavaBeanFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dog&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    优势：将复杂的实例化方法在工厂中返回--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>检测是否成功实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">javaBeanFactoryTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-07.xml&quot;</span>);<br>    <span class="hljs-type">JavaBean</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;javaBeanFactoryBean&quot;</span>,JavaBean.class);<br>    System.out.println(<span class="hljs-string">&quot;javaBean is &quot;</span> + bean1.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230906204106237.png" alt="image-20230906204106237"></p></li></ol></li></ol><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><blockquote><p>FactoryBean和BeanFactory区别</p></blockquote><p>答：共同点都是接口，BeanFactory是IoC容器最大的接口，也就是IoC容器，而FactoryBean是标准化组件工厂的接口，是组件。通常情况下整合第三方框架采用定义FactoryBean实现类的getObject()方法实现。</p><p>BeanFactory是SpringIOC容器中最大的接口，是Spring框架的基础。它是作为一个顶级接口定义了容器的基本行为，例如管理bean的生命周期，配置文件的加载和解析，bean的装配和依赖注入等。BeanFactory接口提供了访问Bean的方式，例如getBean()方法。可以获取不同来源比如数据库，xml文件，java配置类等等，获取bean实例。同时BeanFactory包含了很多子类提供很多强大的功能。</p><p>FactoryBean是标准化组件工厂的接口，是Spring中特殊的bean，可以在getObject()工厂方法自定义实例化bean的逻辑。FactoryBean在容器启动时被创建，一般情况下整合第三方框架采用定义FactoryBean实现类的getObject()方法实现。</p><h3 id="练习：基于XML整合三层架构组件"><a href="#练习：基于XML整合三层架构组件" class="headerlink" title="练习：基于XML整合三层架构组件"></a>练习：基于XML整合三层架构组件</h3><ol><li><p>需求分析</p><p>搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用XML方式进行组件管理！</p><p><img src="/assets/image-20230906212015114.png" alt="image-20230906212015114"></p></li><li><p>数据库的准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database studb;<br><br>use studb;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students (<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  age <span class="hljs-type">INT</span>,<br>  class <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, name, gender, age, class)<br><span class="hljs-keyword">VALUES</span><br>  (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>),<br>  (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中三班&#x27;</span>),<br>  (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;刘七&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>),<br>  (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;陈八&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;杨九&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中三班&#x27;</span>),<br>  (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;吴十&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>);<br><br></code></pre></td></tr></table></figure></li><li><p>实体类的准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.Jmin.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String classes;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getClasses</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> classes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClasses</span><span class="hljs-params">(String classes)</span> &#123;<br>        <span class="hljs-built_in">this</span>.classes = classes;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;com.Jmin.pojo.Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, classes=&#x27;&quot;</span> + classes + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h4 id="三层架构之前对装配的了解"><a href="#三层架构之前对装配的了解" class="headerlink" title="三层架构之前对装配的了解"></a>三层架构之前对装配的了解</h4><ol><li><p>properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Jmin.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/studb</span><br><span class="hljs-attr">Jmin.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">Jmin.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">Jmin.password</span>=<span class="hljs-string">lzm123456</span><br></code></pre></td></tr></table></figure></li><li><p>常规实例化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testForJava</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        JDBCTemplate简化了数据库的crud，但不提供连接池</span><br><span class="hljs-comment">//        DruidDataSource负责连接的创建和数据库驱动的注册等等</span><br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:///studb&quot;</span>);<br>        druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class="hljs-string">&quot;lzm123456&quot;</span>);<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(druidDataSource);<br>        druidDataSource.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p>下面将此实例化过程装配到配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    读取外部配置文件 properties格式的文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将ioc中的bean实例化，并且进行简单sql操作测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testForIOC</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-01.xml&quot;</span>);<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> context.getBean(JdbcTemplate.class);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：sql可以带占位符？替代值，但？不能替代关键字和容器名</span><br><span class="hljs-comment">         * 参数2：Object...param 传入占位符的值</span><br><span class="hljs-comment">         * return int</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> template.update(<span class="hljs-string">&quot;insert into students (id,name,gender,age,class) values (?,?,?,?,?)&quot;</span>, <span class="hljs-number">1001</span>,<span class="hljs-string">&quot;lzm&quot;</span>, <span class="hljs-string">&quot;mal&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;11&quot;</span>);<br>        System.out.println(update);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：sql可以带占位符？替代值，但？不能替代关键字和容器名</span><br><span class="hljs-comment">         * 参数2：RowMapper 列名和属性名的映射器接口</span><br><span class="hljs-comment">         * 参数3：Object...param 传入占位符的值</span><br><span class="hljs-comment">         */</span><br>        template.queryForObject(<span class="hljs-string">&quot;select * from students where id = ?;&quot;</span>, (rs, rowNum) -&gt; &#123;<br>            <span class="hljs-comment">//                rs结果集，rowNum行数</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>            student.setId(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>            student.setName(rs.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>            student.setGender(rs.getString(<span class="hljs-string">&quot;gender&quot;</span>));<br>            student.setAge(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>            student.setClasses(rs.getString(<span class="hljs-string">&quot;class&quot;</span>));<br>            <span class="hljs-keyword">return</span> student;<br>        &#125;,<span class="hljs-number">8</span>);<br><span class="hljs-comment">//        BeanPropertyRowMapper类会根据列名映射属性值</span><br>        List&lt;Student&gt; query = template.query(<span class="hljs-string">&quot;select id,name,gender,age,class as classes from students&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Student&gt;(Student.class));<br>        System.out.println(query);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907085728673.png" alt="image-20230907085728673"></p></li></ol><h4 id="三层架构装配，进阶版"><a href="#三层架构装配，进阶版" class="headerlink" title="三层架构装配，进阶版"></a>三层架构装配，进阶版</h4><ol><li><p>三层架构的构建</p><p>Dao接口以及实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentDao</span> &#123;<br>    List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentDao</span> &#123;<br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setJdbcTemplate</span><span class="hljs-params">(JdbcTemplate jdbcTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.jdbcTemplate = jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,gender,age,class as classes from students;&quot;</span>;<br>        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Student&gt;(Student.class));<br>        System.out.println(studentList);<br>        <span class="hljs-keyword">return</span> studentList;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Service接口以及实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentService</span> &#123;<br>    List&lt;Student&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudentDao</span><span class="hljs-params">(StudentDao studentDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentDao = studentDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> studentDao.queryAll();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br>    <span class="hljs-keyword">private</span> StudentService studentService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudentService</span><span class="hljs-params">(StudentService studentService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentService = studentService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学员数据&quot;</span>+studentService.findAll());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>spring-ioc.xml 容器的装配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--    druid--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    jdbctemp--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    dao -&gt; jdbctemp--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin.UserDao.impl.StudentDaoImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentDao&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    service -&gt; dao--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin.service.impl.StudentServiceImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;studentDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    controller -&gt; service--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin.controller.StudentController&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;controller&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;service&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将IOC的bean实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testForIOC2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-02.xml&quot;</span>);<br>    <span class="hljs-type">StudentController</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(StudentController.class);<br>    bean.findAll();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907090629320.png" alt="image-20230907090629320"></p></li></ol><h3 id="XMLIoC缺点总结"><a href="#XMLIoC缺点总结" class="headerlink" title="XMLIoC缺点总结"></a>XMLIoC缺点总结</h3><ol><li>注入的属性必须添加setter方法</li><li>配置文件与Java代码分离</li><li>XML配置文件解析效率低</li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_SpringIOC容器和核心概念</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/3_SpringIOC%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/3_SpringIOC%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="3-SpringIOC容器和核心概念"><a href="#3-SpringIOC容器和核心概念" class="headerlink" title="3_SpringIOC容器和核心概念"></a>3_SpringIOC容器和核心概念</h1><h2 id="组件和组件管理概念"><a href="#组件和组件管理概念" class="headerlink" title="组件和组件管理概念"></a>组件和组件管理概念</h2><h3 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h3><p>组件是可以复用的对象，但对象不一定是组件。组件可以完全交给Spring 框架进行管理，Spring框架替代了程序员原有的new对象和对象属性赋值动作等！</p><p><img src="/assets/image-20230904224745062.png" alt="image-20230904224745062"></p><p><img src="/assets/image-20230904224800138.png" alt="image-20230904224800138"></p><h2 id="期待"><a href="#期待" class="headerlink" title="期待"></a>期待</h2><ul><li>有人替我们创建组件的对象</li><li>有人帮我们保存组件的对象</li><li>有人帮助我们自动组装</li><li>有人替我们管理事务</li><li>有人协助我们整合其他框架</li></ul><p><img src="/assets/image-20230904230250282.png" alt="image-20230904230250282"></p><h3 id="将组件交给Spring管理的优势？"><a href="#将组件交给Spring管理的优势？" class="headerlink" title="将组件交给Spring管理的优势？"></a>将组件交给Spring管理的优势？</h3><ol><li>降低了组件之间的耦合性</li><li>提高了代码的可重用性和可维护性</li><li>方便了配置和管理</li><li>可享受Spring框架的其他功能（AOP,声明事务管理）等</li></ol><h2 id="SpringIOC容器和容器实现"><a href="#SpringIOC容器和容器实现" class="headerlink" title="SpringIOC容器和容器实现"></a>SpringIOC容器和容器实现</h2><p>Spring管理组件的容器，就是一个复杂容器，不仅存储组件，也可以管理组件之间依赖关系，并且创建和销毁组件等！</p><p>Spring IoC 容器，负责实例化、配置和组装 bean（组件）。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p><p>配置元数据以 <strong>XML、Java 注解或 Java 代码</strong>形式表现。它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系。</p><h2 id="SpringIOC容器具体接口和实现类"><a href="#SpringIOC容器具体接口和实现类" class="headerlink" title="SpringIOC容器具体接口和实现类"></a>SpringIOC容器具体接口和实现类</h2><h3 id="SpringIOC容器接口"><a href="#SpringIOC容器接口" class="headerlink" title="SpringIOC容器接口"></a>SpringIOC容器接口</h3><p><code>BeanFactory</code>接口提供了一种高级配置机制，能够管理任何类型的对象，它是SpringIOC容器标准化超接口</p><p><code>ApplicationContext</code>是 <code>BeanFactory</code>的子接口</p><ul><li>更容易与 Spring 的 AOP 功能集成</li><li>消息资源处理（用于国际化）</li><li>特定于应用程序给予此接口实现，例如Web 应用程序的 <code>WebApplicationContext</code></li></ul><p><code>BeanFactory</code>提供了配置框架和基本功能，而<code>ApplicationContext</code>添加了更多特定于企业的功能。<code>ApplicationContext</code>是<code>BeanFactory</code>的完整超集！</p><h3 id="SpringIOC具体实现类"><a href="#SpringIOC具体实现类" class="headerlink" title="SpringIOC具体实现类"></a>SpringIOC具体实现类</h3><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>通过读取Java配置类创建 IOC 容器对象</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><p><img src="/assets/image-20230905002407515.png" alt="image-20230905002407515"></p><h2 id="SpringIOC容器管理配置方式"><a href="#SpringIOC容器管理配置方式" class="headerlink" title="SpringIOC容器管理配置方式"></a>SpringIOC容器管理配置方式</h2><p>Spring框架提供了多种配置方式：XML配置方式、注解方式和Java配置类方式</p><ol><li>XML配置方式(淘汰)：是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring IoC容器来管理Bean之间的依赖关系。该方式从Spring框架的第一版开始提供支持。</li><li>注解方式：从Spring 2.5版本开始提供支持，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如@Component, @Service, @Autowired等），将Bean注册到Spring IoC容器中，这样Spring IoC容器就可以管理这些Bean之间的依赖关系。</li><li>Java配置类方式：从Spring 3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。Java配置类是一种使用Java编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。</li></ol><p>以<strong>配置类+注解方式</strong>为主进行</p><h2 id="SpringIOC核心功能（概念总结）"><a href="#SpringIOC核心功能（概念总结）" class="headerlink" title="SpringIOC核心功能（概念总结）"></a>SpringIOC核心功能（概念总结）</h2><ul><li><p>IOC容器</p><p>SpringIoC 容器，负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p></li><li><p>IOC控制反转</p><p><img src="/assets/image-20230905003938554.png" alt="image-20230905003938554"></p><p>通常说应用程序中类需要由程序员实例化，但是如果将应用程序中类的信息传递到Spring配置文件中，SpringIOC将读取该配置文件，按需求在SpringIOC中利用反射技术完成实例化。此过程中创建对象的“权利”发生了转交，便是IOC控制反转。</p></li><li><p>DI(Dependency Injection注入依赖)</p><p>应用程序中若对象1需要对象2，可以通过构造函数或者set方法将对象2注入到对象1中，而在SpringIOC中，也可以将对象2注入到对象1中，这便是DI注入依赖。Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。</p><p><img src="/assets/image-20230905004859361.png" alt="image-20230905004859361"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_SpringFramework</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/1_SpringFramework/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/1_SpringFramework/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SpringFramework简介"><a href="#1-SpringFramework简介" class="headerlink" title="1_SpringFramework简介"></a>1_SpringFramework简介</h1><h2 id="技术体系结构"><a href="#技术体系结构" class="headerlink" title="技术体系结构"></a>技术体系结构</h2><ul><li><p>单一架构</p><p>一个项目，一个工程，导出一个war包，在一个Tomcat上运行。称之为all in one。</p><p><img src="/assets/image-20230904154644910.png" alt="image-20230904154644910"></p><p>单一架构，项目主要应用技术框架为：Spring，SpringMVC，Mybatis</p></li><li><p>分布式架构</p><p>一个项目（对应idea中的一个project），拆分为多个模块，每个模块是一个idea中的module。每一个工程都是运行在自己的Tomcat上。模块之间可以相互调用。每一个模块内部可以看作一个单一架构的应用。</p><p><img src="/assets/image-20230904160757092.png" alt="image-20230904160757092"></p><p>分布式架构，项目主要应用技术框架：SpringBoot（SSM），SpringCloud，中间件等等。</p></li></ul><h2 id="框架的理解"><a href="#框架的理解" class="headerlink" title="框架的理解"></a>框架的理解</h2><blockquote><p>框架( Framework )是一个集成了基本结构、规范、设计模式、编程语言和程序库等基础组件的软件系统，它可以用来构建更高级别的应用程序。</p></blockquote><p>框架&#x3D;jar包+配置文件</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_Spring</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/2_Spring%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/2_Spring%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h1><h2 id="Spring和SpringFramework"><a href="#Spring和SpringFramework" class="headerlink" title="Spring和SpringFramework"></a>Spring和SpringFramework</h2><p>广义的Spring：泛指SpringFramework为基础的Spring技术栈。Spring 已经不再是一个单纯的应用框架。</p><p>Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。</p><p>狭义的 Spring：Spring Framework</p><h2 id="SpringFramework主要功能模块"><a href="#SpringFramework主要功能模块" class="headerlink" title="SpringFramework主要功能模块"></a>SpringFramework主要功能模块</h2><p><img src="/assets/image-20230904171209253.png" alt="image-20230904171209253"></p><table><thead><tr><th>功能模块</th><th>功能介绍</th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>TX</td><td>声明式事务管理。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>13_Maven总结.md</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/13_Maven%E6%80%BB%E7%BB%93/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/13_Maven%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230904150139697.png" alt="image-20230904150139697"></p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>12_Maven实战</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/12_Maven%E5%AE%9E%E6%88%98/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/12_Maven%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230904141903713.png" alt="image-20230904141903713"></p><h2 id="父工程micro-shop-maven"><a href="#父工程micro-shop-maven" class="headerlink" title="父工程micro-shop maven:"></a>父工程micro-shop maven:</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micro-shop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>user-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>order-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jackson.version</span>&gt;</span>2.15.0<span class="hljs-tag">&lt;/<span class="hljs-name">jackson.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shiro.version</span>&gt;</span>1.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">shiro.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-io.version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">commons-io.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            子工程本地部署后，生成jar包为依赖，供给其他工程引用。<br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="子工程-common-service"><a href="#子工程-common-service" class="headerlink" title="子工程 common-service"></a>子工程 common-service</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micro-shop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--    将本项目供本地仓库服务，需要先部署--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="子工程-user-service"><a href="#子工程-user-service" class="headerlink" title="子工程 user-service"></a>子工程 user-service</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micro-shop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>user-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;1.0.1&lt;/version&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="子工程-order-service"><a href="#子工程-order-service" class="headerlink" title="子工程 order-service"></a>子工程 order-service</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micro-shop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>order-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;1.0.1&lt;/version&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11_Maven聚合特性</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/11_Maven%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/11_Maven%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="11-Maven聚合特性"><a href="#11-Maven聚合特性" class="headerlink" title="11_Maven聚合特性"></a>11_Maven聚合特性</h1><ol><li><p>聚合概念</p><p>Maven 聚合是指将多个项目组织到一个父级项目中，通过触发父工程的构建，统一按顺序触发子工程构建的过程!</p></li><li><p>聚合作用</p><ol><li>统一管理子项目构建：通过聚合，可以将多个子项目组织在一起，方便管理和维护。</li><li>优化构建顺序：通过聚合，可以对多个项目进行顺序控制，避免出现构建依赖混乱导致构建失败的情况。</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>parent-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>child-project1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>child-project2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10_Maven继承和聚合特性</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/10_Maven%E7%BB%A7%E6%89%BF%E5%92%8C%E8%81%9A%E5%90%88%E7%89%B9%E6%80%A7/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/10_Maven%E7%BB%A7%E6%89%BF%E5%92%8C%E8%81%9A%E5%90%88%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="10-Maven继承和聚合特性"><a href="#10-Maven继承和聚合特性" class="headerlink" title="10_Maven继承和聚合特性"></a>10_Maven继承和聚合特性</h1><p>父工程管理依赖，不会加载，而子工程可以继承这些依赖或者覆盖版本</p><p><img src="/assets/image-20230904120901362.png" alt="image-20230904120901362"></p><p><img src="/assets/image-20230904120844140.png" alt="image-20230904120844140"></p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_Maven扩展构建管理和插件配置</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/9_Maven%E6%89%A9%E5%B1%95%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E5%92%8C%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/9_Maven%E6%89%A9%E5%B1%95%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E5%92%8C%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="9-Maven扩展构建管理和插件配置"><a href="#9-Maven扩展构建管理和插件配置" class="headerlink" title="9_Maven扩展构建管理和插件配置"></a>9_Maven扩展构建管理和插件配置</h1><h2 id="构建概念"><a href="#构建概念" class="headerlink" title="构建概念"></a>构建概念</h2><p>项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。</p><p><img src="/assets/image-20230904111151694.png" alt="image-20230904111151694"></p><h3 id="主动触发场景"><a href="#主动触发场景" class="headerlink" title="主动触发场景"></a>主动触发场景</h3><ul><li>重新编译 : 编译不充分, 部分文件没有被编译!</li><li>打包 : 独立部署到外部服务器软件,打包部署</li><li>部署本地或者私服仓库 : maven工程加入到本地或者私服仓库,供其他工程使用，部署必须jar包形式</li></ul><p><img src="/assets/image-20230904111338744.png" alt="image-20230904111338744"></p><p><img src="/assets/image-20230904111355381.png" alt="image-20230904111355381"></p><h3 id="构建命令周期"><a href="#构建命令周期" class="headerlink" title="构建命令周期"></a>构建命令周期</h3><p>构建生命周期可以理解成是一组固定构建命令的有序集合，触发周期后的命令，会自动触发周期前的命令！也是一种简化构建的思路!</p><p><img src="/assets/image-20230904112724642.png" alt="image-20230904112724642"></p><ul><li><p>清理周期：主要是对项目编译生成文件进行清理</p><p>  包含命令：clean</p></li><li><p>默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分</p><p>  包含命令：compile - test - package - install &#x2F; deploy</p></li><li><p>报告周期</p><p>  包含命令：site</p><p>  打包: mvn clean package 本地仓库: mvn clean install</p></li></ul><p>打包最佳方式：mvn clean package</p><h3 id="周期，命令和插件"><a href="#周期，命令和插件" class="headerlink" title="周期，命令和插件:"></a>周期，命令和插件:</h3><ul><li><p>周期→包含若干命令→包含若干插件!</p></li><li><p>使用周期命令构建，简化构建过程！</p></li><li><p>最终进行构建的是插件！</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- jdk17 和 war包版本插件不匹配 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_Maven依赖导入失败场景和解决方案</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/8_Maven%E4%BE%9D%E8%B5%96%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5%E5%9C%BA%E6%99%AF%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/8_Maven%E4%BE%9D%E8%B5%96%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5%E5%9C%BA%E6%99%AF%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="8-Maven依赖导入失败场景和解决方案"><a href="#8-Maven依赖导入失败场景和解决方案" class="headerlink" title="8_Maven依赖导入失败场景和解决方案"></a>8_Maven依赖导入失败场景和解决方案</h1><h2 id="出错的场景"><a href="#出错的场景" class="headerlink" title="出错的场景"></a>出错的场景</h2><ol><li>下载依赖时出现网络故障或仓库服务器宕机等原因，导致无法连接至 Maven 仓库，从而无法下载依赖。</li><li>依赖项的版本号或配置文件中的版本号错误，或者依赖项没有正确定义，导致 Maven 下载的依赖项与实际需要的不一致，从而引发错误。</li><li>本地 Maven 仓库或缓存被污染或损坏，导致 Maven 无法正确地使用现有的依赖项，并且也无法重新下载！</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>检查网络连接和 Maven 仓库服务器状态。</p></li><li><p>确保依赖项的版本号与项目对应的版本号匹配，并检查 POM 文件中的依赖项是否正确。</p></li><li><p>清除本地 Maven 仓库缓存（lastUpdated 文件），因为只要存在lastupdated缓存文件，刷新也不会重新下载。本地仓库中，根据依赖的gav属性依次向下查找文件夹，最终删除内部的文件，刷新重新下载即可！</p><p> 例如： pom.xml依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可能出现的问题：访问本地仓库不存在依赖，并且不访问阿里镜像的问题，即本地仓库被污染。解决问题则必须删除污染文件，lastupdated缓存文件</p><p>​    <a href="https://secure2-danger.wostatic.cn/static/tpcPbE2YRb3wNi5TGT62Ht/%E6%B8%85%E7%90%86maven%E9%94%99%E8%AF%AF%E7%BC%93%E5%AD%98.bat?auth_key=1693796348-tbwNYKRzNqEaJgQSKCXWeN-0-ee9c561a4a3d43509b558e609636156c&download=%E6%B8%85%E7%90%86maven%E9%94%99%E8%AF%AF%E7%BC%93%E5%AD%98.bat">清理错误缓存脚本</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XML">使用记事本打开<br>set REPOSITORY_PATH=D:\repository  改成你本地仓库地址即可！<br>点击运行脚本，即可自动清理本地错误缓存文件！！<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_Maven依赖传递和冲突</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/7_Maven%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E5%92%8C%E5%86%B2%E7%AA%81/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/7_Maven%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E5%92%8C%E5%86%B2%E7%AA%81/</url>
    
    <content type="html"><![CDATA[<h1 id="7-Maven依赖传递和冲突"><a href="#7-Maven依赖传递和冲突" class="headerlink" title="7_Maven依赖传递和冲突"></a>7_Maven依赖传递和冲突</h1><p><strong>依赖传递</strong>指的是当一个模块或库 A 依赖于另一个模块或库 B，而 B 又依赖于模块或库 C，那么 A 会间接依赖于 C。</p><p>即导入依赖，会自动导入依赖的依赖。（compile dependenices）</p><h2 id="依赖传递的作用"><a href="#依赖传递的作用" class="headerlink" title="依赖传递的作用"></a>依赖传递的作用</h2><ol><li>减少重复依赖：当多个项目依赖同一个库时，Maven 可以自动下载并且只下载一次该库。这样可以减少项目的构建时间和磁盘空间。</li><li>自动管理依赖: Maven 可以自动管理依赖项，使用依赖传递，简化了依赖项的管理，使项目构建更加可靠和一致。</li><li>确保依赖版本正确性：通过依赖传递的依赖，之间都不会存在版本兼容性问题，确实依赖的版本正确性！</li></ol><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>发现已经存在的重复依赖，会终止依赖传递，避免依赖和重复依赖的问题。</p><blockquote><p>假设A依赖B的1.0，而C依赖了B的2.0，问项目中引入A和C，此时B的版本(1.0)</p></blockquote><p>依赖冲突的解决原则：</p><ul><li>第一原则：谁短谁优先，即引用的路径长度。假设A-E-D-B1.0和C-B2.0，此时优先引用后者。C-A-B2.0</li><li>第二原则：谁上谁优先，即dependencies声明的先后顺序。假设A-B1.0,C-B2.0优先前者。A-C-B1.0</li><li>只要发生了冲突，后续的依赖传递将会发生终止。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_Maven核心功能依赖和构建管理</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/6_Maven%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E4%BE%9D%E8%B5%96%E5%92%8C%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/6_Maven%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E4%BE%9D%E8%B5%96%E5%92%8C%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="6-Maven核心功能依赖和构建管理"><a href="#6-Maven核心功能依赖和构建管理" class="headerlink" title="6_Maven核心功能依赖和构建管理"></a>6_Maven核心功能依赖和构建管理</h1><p>Maven 依赖管理是 Maven 软件中最重要的功能之一。能够帮助开发人员自动解决软件包依赖问题。</p><p>Maven 能够自动解析项目的依赖关系，并通过 Maven 仓库自动下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">   通过编写依赖jar包的gav必要属性，引入第三方依赖！</span><br><span class="hljs-comment">   scope属性是可选的，可以指定依赖生效范围！</span><br><span class="hljs-comment">   依赖信息查询方式：</span><br><span class="hljs-comment">      1. maven仓库信息官网 https://mvnrepository.com/</span><br><span class="hljs-comment">      2. mavensearch插件搜索</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入具体的依赖包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            生效范围</span><br><span class="hljs-comment">            - compile ：main目录 test目录  打包打包 [默认]</span><br><span class="hljs-comment">            - provided：main目录 test目录  Servlet</span><br><span class="hljs-comment">            - runtime： 打包运行           MySQL</span><br><span class="hljs-comment">            - test:    test目录           junit</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://mvnrepository.com/">https://mvnrepository.com</a></p><p>maven-search插件</p><p><img src="/assets/image-20230904092353800.png" alt="image-20230904092353800"></p><p><img src="/assets/image-20230904092543000.png" alt="image-20230904092543000"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="如何设置变量呢，用于依赖版本管理"><a href="#如何设置变量呢，用于依赖版本管理" class="headerlink" title="如何设置变量呢，用于依赖版本管理"></a>如何设置变量呢，用于依赖版本管理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    声明变量，声明后可以在其他位置引用$&#123;hutool.version&#125;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hutool.version</span>&gt;</span>5.8.21<span class="hljs-tag">&lt;/<span class="hljs-name">hutool.version</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230904093404904.png" alt="image-20230904093404904"></p><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>引入依赖的作用域</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">scope引用作用域<br>默认compile 全局<br>main 主类<br><span class="hljs-keyword">test </span>测试 Junit @Test<br>runtime 运行和打包 mysql Class.forname(com.mysql.cj.jdbc.Driver)<br>provided main和test可以使用，runtime不使用 Servlet HttpServlet<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_Maven工程项目结构说明</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/5_Maven%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/5_Maven%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="5-Maven工程项目结构说明"><a href="#5-Maven工程项目结构说明" class="headerlink" title="5_Maven工程项目结构说明"></a>5_Maven工程项目结构说明</h1><p>Maven Web 程序的文件结构及每个文件的作用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">|-- pom.xml                               # Maven 项目管理文件 <br>|-- src<br>    |-- main                              # 项目主要代码<br>    |   |-- java                          # Java 源代码目录<br>    |   |   `-- com/example/myapp         # 开发者代码主目录<br>    |   |       |-- controller            # 存放 Controller 层代码的目录<br>    |   |       |-- service               # 存放 Service 层代码的目录<br>    |   |       |-- dao                   # 存放 DAO 层代码的目录<br>    |   |       `-- model                 # 存放数据模型的目录<br>    |   |-- resources                     # 资源目录，存放配置文件、静态资源等<br>    |   |   |-- log4j.properties          # 日志配置文件<br>    |   |   |-- spring-mybatis.xml        # Spring Mybatis 配置文件<br>    |   |   `-- static                    # 存放静态资源的目录<br>    |   |       |-- css                   # 存放 CSS 文件的目录<br>    |   |       |-- js                    # 存放 JavaScript 文件的目录<br>    |   |       `-- images                # 存放图片资源的目录<br>    |   `-- webapp                        # 存放 WEB 相关配置和资源<br>    |       |-- WEB-INF                   # 存放 WEB 应用配置文件<br>    |       |   |-- web.xml               # Web 应用的部署描述文件<br>    |       |   `-- classes               # 存放编译后的 class 文件<br>    |       `-- index.html                # Web 应用入口页面<br>    `-- test                              # 项目测试代码<br>        |-- java                          # 单元测试目录<br>        `-- resources                     # 测试资源目录<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_idea构建Maven.Javaee工程</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/4_idea%E6%9E%84%E5%BB%BAMaven.Javaee%E5%B7%A5%E7%A8%8B/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/4_idea%E6%9E%84%E5%BB%BAMaven.Javaee%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="4-idea构建Maven-Javee工程"><a href="#4-idea构建Maven-Javee工程" class="headerlink" title="4_idea构建Maven.Javee工程"></a>4_idea构建Maven.Javee工程</h1><h2 id="手动创建web项目"><a href="#手动创建web项目" class="headerlink" title="手动创建web项目"></a>手动创建web项目</h2><ol><li>创建一个Javase maven工程</li><li>补全文件结构<br>main<br>   web<br>   WEB-INF<br>       web.xml</li><li>pom.xml<br>packaging    war</li><li>刷新-web多了一个小蓝点</li></ol><p><img src="/assets/image-20230904085713423.png" alt="image-20230904085713423"></p><h2 id="插件创建web项目"><a href="#插件创建web项目" class="headerlink" title="插件创建web项目"></a>插件创建web项目</h2><ol><li><p>安装插件JBLJavaToWeb</p><p><img src="/assets/image-20230904090112064.png" alt="image-20230904090112064"></p></li><li><p>创建一个javaeemaven工程</p></li><li><p>右键、使用插件快速补全web项目</p><p><img src="/assets/image-20230904090501505.png" alt="image-20230904090501505"></p></li></ol><p><img src="/assets/image-20230904090548624.png" alt="image-20230904090548624"></p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_MAVEN简介</title>
    <link href="/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/1_Maven%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/1_Maven%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MAVEN简介"><a href="#1-MAVEN简介" class="headerlink" title="1_MAVEN简介"></a>1_MAVEN简介</h1><p>Maven 是一款为 Java 项目构建管理、依赖管理的工具（软件），使用 Maven 可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。</p><p>（项目构建、依赖管理）√</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="场景概念"><a href="#场景概念" class="headerlink" title="场景概念"></a>场景概念</h3><ol><li>项目需要导包（依赖），可以将所需的依赖项信息填到Maven工程的配置文件，Maven将下载并复制到项目中。</li><li>开发完成后，如果需要打包为war文件并部署到服务器中运行，可以使用一行构建命令（mvn package）快速项目构建和打包，节省时间。</li></ol><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>​Maven 可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。</p><h3 id="构建管理"><a href="#构建管理" class="headerlink" title="构建管理"></a>构建管理</h3><p>​项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程！Maven可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，Maven 可以确保每一个构建过程都遵循同样的规则和最佳实践。</p><p><img src="/assets/image-20230903235602934.png" alt="image-20230903235602934"></p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_MAVEN安装和配置</title>
    <link href="/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/2_Maven%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/2_Maven%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="2-Maven安装和配置"><a href="#2-Maven安装和配置" class="headerlink" title="2_Maven安装和配置"></a>2_Maven安装和配置</h1><p>下载安装环境变量配置不说了</p><h2 id="本地maven基本配置"><a href="#本地maven基本配置" class="headerlink" title="本地maven基本配置"></a>本地maven基本配置</h2><p>改maven&#x2F;conf&#x2F;settings.xml配置文件</p><p>目标：</p><ol><li>依赖本地缓存位置（本地仓库位置）</li><li>maven下载镜像</li><li>maven选用编译项目的jdk版本！</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml">依赖本地缓存位置（本地仓库位置）<br><span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment"> | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment"> |</span><br><span class="hljs-comment"> | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- conf/settings.xml 55行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><br>maven下载镜像<br><span class="hljs-comment">&lt;!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>配置jdk17版本项目构建<br><span class="hljs-comment">&lt;!--在profiles节点(标签)下添加jdk编译版本 268行附近--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-17<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="IDEA配置本地MAVEN"><a href="#IDEA配置本地MAVEN" class="headerlink" title="IDEA配置本地MAVEN"></a>IDEA配置本地MAVEN</h2><p>替换成本地配置好的maven</p><ol><li>进入IDEA，file &#x2F; settings &#x2F; build &#x2F; build tool &#x2F; maven，选中本地maven</li><li>查看本地仓库是否自动变为配置的地址</li></ol>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_基于idea的maven工程创建</title>
    <link href="/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/3_%E5%9F%BA%E4%BA%8Eidea%E7%9A%84maven%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA/"/>
    <url>/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/3_%E5%9F%BA%E4%BA%8Eidea%E7%9A%84maven%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="3-基于idea的maven工程创建"><a href="#3-基于idea的maven工程创建" class="headerlink" title="3_基于idea的maven工程创建"></a>3_基于idea的maven工程创建</h1><h2 id="GAVP属性"><a href="#GAVP属性" class="headerlink" title="GAVP属性"></a>GAVP属性</h2><p>GAVP 是指 GroupId、ArtifactId、Version、Packaging</p><p>前三个是必要的，而 Packaging 属性为可选项</p><ul><li><p>GroupId</p><p>GroupID 格式：com.{公司&#x2F;BU }.业务线.[子业务线]，最多 4 级。com.taobao.tddl</p></li><li><p>ArtifactID</p><p>产品线名-模块名。tc-client或者bookstore</p></li><li><p>Version版本号</p><p>主版本号.次版本号.修订号，通常</p><p>初始→1.0.0  修改bug → 1.0.1  功能调整 → 1.1.1</p><p><img src="/assets/image-20230904082705083.png" alt="image-20230904082705083"></p></li><li><p>Packaging定义规则</p><p>指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型</p><ul><li><p>packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。</p></li><li><p>packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。</p></li><li><p>packaging 属性为 pom，代表不会打包，用来做继承的父工程。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230824115837834.png" alt="image-20230824115837834"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">2</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(salary),<span class="hljs-built_in">MIN</span>(salary),<span class="hljs-built_in">AVG</span>(salary),<span class="hljs-built_in">SUM</span>(salary)<br><span class="hljs-keyword">FROM</span> employees;<br>#<span class="hljs-number">3</span><br><span class="hljs-keyword">SELECT</span> job_id,<span class="hljs-built_in">MAX</span>(salary),<span class="hljs-built_in">MIN</span>(salary),<span class="hljs-built_in">AVG</span>(salary),<span class="hljs-built_in">SUM</span>(salary)<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id;<br>#<span class="hljs-number">4</span><br><span class="hljs-keyword">SELECT</span> job_id,<span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id;<br>#<span class="hljs-number">5</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(salary) <span class="hljs-operator">-</span> <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-string">&#x27;DIFFERENCE&#x27;</span><br><span class="hljs-keyword">FROM</span> employees;<br>#<span class="hljs-number">6</span><br><span class="hljs-keyword">SELECT</span> manager_id,<span class="hljs-built_in">MIN</span>(salary)<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> manager_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">6000</span>;<br>#<span class="hljs-number">7</span><br><span class="hljs-keyword">SELECT</span> D.department_name,D.location_id,<span class="hljs-built_in">COUNT</span>(E.employee_id),<span class="hljs-built_in">AVG</span>(E.salary)<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> D.department_name,D.location_id<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">AVG</span>(e.salary) <span class="hljs-keyword">DESC</span>;<br>#<span class="hljs-number">8</span><br><span class="hljs-keyword">SELECT</span> E.job_id,D.department_name,J.job_title,<span class="hljs-built_in">MIN</span>(E.salary)<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> E.department_id<br><span class="hljs-keyword">JOIN</span> jobs J <span class="hljs-keyword">ON</span> E.job_id <span class="hljs-operator">=</span> J.job_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> E.job_id,D.department_name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="多表查询1"><a href="#多表查询1" class="headerlink" title="多表查询1"></a>多表查询1</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">【题目】<br><span class="hljs-section"># 1.显示所有员工的姓名，部门号和部门名称。</span><br><span class="hljs-section"># 2.查询90号部门员工的job<span class="hljs-emphasis">_id和90号部门的location_</span>id</span><br><span class="hljs-section"># 3.选择所有有奖金的员工的 last<span class="hljs-emphasis">_name , department_</span>name , location<span class="hljs-emphasis">_id , city</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 4.选择city在Toronto工作的员工的 last_</span>name , job<span class="hljs-emphasis">_id , department_</span>id , department<span class="hljs-emphasis">_name</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 5.查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 6.选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式</span></span><br><span class="hljs-emphasis"><span class="hljs-section">employeesEmp#manager  Mgr#</span></span><br><span class="hljs-emphasis"><span class="hljs-section">kochhar 101king     100</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 7.查询哪些部门没有员工</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 8. 查询哪个城市没有部门</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 9. 查询部门名为 Sales 或 IT 的员工信息</span></span><br></code></pre></td></tr></table></figure><h1 id="多表查询2"><a href="#多表查询2" class="headerlink" title="多表查询2"></a>多表查询2</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs markdown">储备：建表操作：<br>CREATE TABLE <span class="hljs-code">`t_dept`</span> (<br><span class="hljs-code">`id`</span> INT(11) NOT NULL AUTO<span class="hljs-emphasis">_INCREMENT,</span><br><span class="hljs-emphasis">`deptName` VARCHAR(30) DEFAULT NULL,</span><br><span class="hljs-emphasis">`address` VARCHAR(40) DEFAULT NULL,</span><br><span class="hljs-emphasis">PRIMARY KEY (`id`)</span><br><span class="hljs-emphasis">) ENGINE=INNODB AUTO_</span>INCREMENT=1 DEFAULT CHARSET=utf8;<br>CREATE TABLE <span class="hljs-code">`t_emp`</span> (<br><span class="hljs-code">`id`</span> INT(11) NOT NULL AUTO<span class="hljs-emphasis">_INCREMENT,</span><br><span class="hljs-emphasis">`name` VARCHAR(20) DEFAULT NULL,</span><br><span class="hljs-emphasis">`age` INT(3) DEFAULT NULL,</span><br><span class="hljs-emphasis">`deptId` INT(11) DEFAULT NULL,</span><br><span class="hljs-emphasis">empno int not null,</span><br><span class="hljs-emphasis">PRIMARY KEY (`id`),</span><br><span class="hljs-emphasis">KEY `idx_</span>dept<span class="hljs-emphasis">_id` (`deptId`)</span><br><span class="hljs-emphasis">#CONSTRAINT `fk_</span>dept<span class="hljs-emphasis">_id` FOREIGN KEY (`deptId`) REFERENCES `t_</span>dept<span class="hljs-code">` (`</span>id`)<br>) ENGINE=INNODB AUTO<span class="hljs-emphasis">_INCREMENT=1 DEFAULT CHARSET=utf8;</span><br><span class="hljs-emphasis">1. 所有有门派的人员信息</span><br><span class="hljs-emphasis">（ A、B两表共有）</span><br><span class="hljs-emphasis">INSERT INTO t_</span>dept(deptName,address) VALUES(&#x27;华山&#x27;,&#x27;华山&#x27;);<br>INSERT INTO t<span class="hljs-emphasis">_dept(deptName,address) VALUES(&#x27;丐帮&#x27;,&#x27;洛阳&#x27;);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>dept(deptName,address) VALUES(&#x27;峨眉&#x27;,&#x27;峨眉山&#x27;);<br>INSERT INTO t<span class="hljs-emphasis">_dept(deptName,address) VALUES(&#x27;武当&#x27;,&#x27;武当山&#x27;);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>dept(deptName,address) VALUES(&#x27;明教&#x27;,&#x27;光明顶&#x27;);<br>INSERT INTO t<span class="hljs-emphasis">_dept(deptName,address) VALUES(&#x27;少林&#x27;,&#x27;少林寺&#x27;);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;风清扬&#x27;,90,1,100001);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;岳不群&#x27;,50,1,100002);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;令狐冲&#x27;,24,1,100003);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;洪七公&#x27;,70,2,100004);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;乔峰&#x27;,35,2,100005);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;灭绝师太&#x27;,70,3,100006);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;周芷若&#x27;,20,3,100007);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;张三丰&#x27;,100,4,100008);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;张无忌&#x27;,25,5,100009);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;韦小宝&#x27;,18,null,100010);</span><br><span class="hljs-emphasis">【题目】</span><br><span class="hljs-emphasis">#1.所有有门派的人员信息</span><br><span class="hljs-emphasis">（ A、B两表共有）</span><br><span class="hljs-emphasis">#2.列出所有用户，并显示其机构信息</span><br><span class="hljs-emphasis">（A的全集）</span><br><span class="hljs-emphasis">#3.列出所有门派</span><br><span class="hljs-emphasis">（B的全集）</span><br><span class="hljs-emphasis">#4.所有不入门派的人员</span><br><span class="hljs-emphasis">（A的独有）</span><br><span class="hljs-emphasis">#5.所有没人入的门派</span><br><span class="hljs-emphasis">（B的独有）</span><br><span class="hljs-emphasis">#6.列出所有人员和机构的对照关系</span><br><span class="hljs-emphasis">(AB全有)</span><br><span class="hljs-emphasis">#MySQL Full Join的实现 因为MySQL不支持FULL JOIN,下面是替代方法</span><br><span class="hljs-emphasis">#left join + union(可去除重复数据)+ right join</span><br><span class="hljs-emphasis">#7.列出所有没入派的人员和没人入的门派</span><br><span class="hljs-emphasis">（A的独有+B的独有）</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/5_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/5_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230821185819433.png" alt="image-20230821185819433"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,first_name,department_id,<span class="hljs-number">12</span> <span class="hljs-operator">*</span> salary <span class="hljs-operator">*</span> (<span class="hljs-number">1</span> <span class="hljs-operator">+</span> IFNULL(commission_pct,<span class="hljs-number">0</span>)) <span class="hljs-string">&#x27;annual_salary&#x27;</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> first_name <span class="hljs-keyword">ASC</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name,salary <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">8000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">17000</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">21</span>,<span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> email <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%e%&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> LENGTH(email) <span class="hljs-keyword">DESC</span>,department_id <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/4_%E8%BF%90%E7%AE%97%E7%AC%A6/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/4_%E8%BF%90%E7%AE%97%E7%AC%A6/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230821165556805.png" alt="image-20230821165556805"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,first_name,salary <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">5000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">12000</span>; <br><br><span class="hljs-keyword">SELECT</span> last_name,first_name,department_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">OR</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name,job_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-operator">&lt;=&gt;</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name,commission_pct <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;__a%&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%a%k%&#x27;</span> <span class="hljs-keyword">or</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%k%a%&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%e&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> first_name,last_name,job_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">SELECT</span> first_name,last_name,department_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-keyword">IN</span>(<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/%E7%BB%83%E4%B9%A0/Users\29522\AppData\Roaming\Typora\typora-user-images\image-20230821143523375.png" alt="image-20230821143523375"></p><ol><li><p><img src="/assets/image-20230821143942656.png" alt="image-20230821143942656"></p></li><li><p><img src="/assets/image-20230821144031691.png" alt="image-20230821144031691"></p></li><li><p><img src="/assets/image-20230821144211358.png" alt="image-20230821144211358"></p></li><li><p><img src="/assets/image-20230821144655506.png" alt="image-20230821144655506"></p></li><li><p><img src="/assets/image-20230821144721489.png" alt="image-20230821144721489"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E5%87%AF%E7%A5%9E%E9%99%8D%E4%B8%B4/kaiGod/"/>
    <url>/2023/09/03/%E5%87%AF%E7%A5%9E%E9%99%8D%E4%B8%B4/kaiGod/</url>
    
    <content type="html"><![CDATA[<h1 id="帅是一种态度"><a href="#帅是一种态度" class="headerlink" title="帅是一种态度"></a>帅是一种态度</h1><h1 id="HANDSOMEBOY"><a href="#HANDSOMEBOY" class="headerlink" title="HANDSOMEBOY"></a>HANDSOMEBOY</h1><p><img src="/assets/image-20230903094856925.png" alt="image-20230903094856925"></p><h1 id="FREEDOMBOY"><a href="#FREEDOMBOY" class="headerlink" title="FREEDOMBOY"></a>FREEDOMBOY</h1><p><img src="/assets/image-20230903094907233.png" alt="image-20230903094907233"></p><h1 id="FASHIONBOY"><a href="#FASHIONBOY" class="headerlink" title="FASHIONBOY"></a>FASHIONBOY</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Listener监听器</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/10_Listener%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/10_Listener%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul><li><p>监听器可以监听就是在application,session,request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。</p></li><li><p>Listener分类：JavaWeb中提供了8个监听器。</p><p><img src="/assets/image-20230903201633021.png" alt="image-20230903201633021"></p></li></ul><p><img src="/assets/image-20230903202100304.png" alt="image-20230903202100304"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/1_HTTP/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/1_HTTP/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则</p><ol><li>基于TCP协议：面向连接，安全</li><li>基于请求-响应模型的：一次请求对应一次响应</li><li>HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。<ul><li>缺点：多次请求间不能共享数据。JAVA中使用会话技术（Cookie，Session）来解决此问题。</li><li>优点：速度快</li></ul></li></ol><h2 id="HTTP-请求数据格式"><a href="#HTTP-请求数据格式" class="headerlink" title="HTTP-请求数据格式"></a>HTTP-请求数据格式</h2><p><img src="/assets/image-20230831230845473.png" alt="image-20230831230845473"><img src="/assets/image-20230831231959008.png" alt="image-20230831231959008"></p><p>请求数据分为3部分：</p><ol><li>请求行：请求数据的第一行，其中GET表示请求方式，表示请求资源路径，HTTP&#x2F;1.1表示协议版本</li><li>请求头：第二行开始，格式为key:value形式。</li><li>请求体：POST请求的最后一部分，存放请求参数</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Host：表示请求的主机名<br><span class="hljs-keyword">User</span>-Agent：浏览器版本，例如Chrome浏览器的标识类似Mozilla/<span class="hljs-number">5.0</span>.<br>Chrome/<span class="hljs-number">79</span>：IE浏览器的标识类似Mozilla/<span class="hljs-number">5.0</span>(Windows NT.)<span class="hljs-keyword">like</span> Gecko;<br>Accept：表示浏览器能接收的资源类型，如<span class="hljs-type">text</span><span class="hljs-comment">/*,image,/*或者*/</span>*表示所有；<br>Accept-<span class="hljs-keyword">Language</span>：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；<br>Accept-<span class="hljs-keyword">Encoding</span>：表示浏览器可以支持的压缩类型，例如gzip,deflate等。<br></code></pre></td></tr></table></figure><h3 id="GET请求和POST请求区别："><a href="#GET请求和POST请求区别：" class="headerlink" title="GET请求和POST请求区别："></a>GET请求和POST请求区别：</h3><ol><li>GET请求请求参数在请求行中，没有请求体。<br>POST请求请求参数在请求体中</li><li>GET请求请求参数大小有限制，POST没有</li></ol><p><img src="/assets/image-20230901072215650.png" alt="image-20230901072215650"></p><p><img src="/assets/image-20230901072253569.png" alt="image-20230901072253569"></p><p><img src="/assets/image-20230901072312125.png" alt="image-20230901072312125"></p><h2 id="HTTP-响应数据格式"><a href="#HTTP-响应数据格式" class="headerlink" title="HTTP-响应数据格式"></a>HTTP-响应数据格式</h2><p><img src="/assets/image-20230901072548757.png" alt="image-20230901072548757"></p><ol><li>响应行：响应数据的第一行。其中HTTP&#x2F;1.1表示协议版本，200表示响应状态码，OK表示状态码描述</li><li>响应头：第二行开始，格式为key:value形式</li><li>响应体：最后一部分。存放响应数据</li></ol><blockquote><p>响应行的状态码说明：</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1</span>xx 响应中<span class="hljs-comment">----临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</span><br><span class="hljs-number">2</span>xx 成功<span class="hljs-comment">----表示请求已经被成功接收，处理已完成</span><br><span class="hljs-number">3</span>xx 重定向<span class="hljs-comment">----重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</span><br><span class="hljs-number">4</span>xx 客户端错误<span class="hljs-comment">----处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等。</span><br><span class="hljs-number">5</span>xx 服务器端错误<span class="hljs-comment">----处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</span><br></code></pre></td></tr></table></figure><blockquote><p>常见的响应状态码</p></blockquote><p><img src="/assets/image-20230901074144579.png" alt="image-20230901074144579"></p><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a></p><blockquote><p>常见的HTTP响应头</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">Content</span>-Type:表示该响应内容的类型，例如text/html,image/jpeg;<br><span class="hljs-attribute">Content</span>-Length:表示该响应内容的长度（字节数）<br>Content-Encoding:表示该响应压缩算法，例如gzip;<br>Cache-Control:指示客户端应如何缓存，例如max-age=<span class="hljs-number">300</span> 表示可以最多缓存<span class="hljs-number">300</span>秒<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Servlet</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/3_Servlet/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/3_Servlet/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Servlet是Java提供的一门动态web资源开发技术</p><p><img src="/assets/image-20230901085623970.png" alt="image-20230901085623970"></p><p>Servlet是javaee规范之一，其实就一个<strong>接口</strong>，需要我们定义Servlet类的实现类，并由web服务器运行Servlet</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><img src="/assets/image-20230901090339326.png" alt="image-20230901090339326"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;<br>                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;<br>                &lt;version&gt;<span class="hljs-number">2.2</span>&lt;/version&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>&lt;/build&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello serlvet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Servlet执行流程"><a href="#Servlet执行流程" class="headerlink" title="Servlet执行流程"></a>Servlet执行流程</h2><p><img src="/assets/image-20230901190907824.png" alt="image-20230901190907824"></p><ol><li>Servlet由谁创建？Servlet方法由谁调用？</li></ol><blockquote><p>答：Tomcat服务器创建和调用。</p></blockquote><ol start="2"><li>服务器如何知道Servlet中一定存在servlet方法？</li></ol><blockquote><p>答：因为我们自定义的Servlet，必须实现Servlet接口并复写其方法，而Servlet接口中有service方法。</p></blockquote><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p>对象的生命周期指的是一个对象从被创建到被销毁的整个过程。</p><p><img src="/assets/image-20230901192144902.png" alt="image-20230901192144902"></p><p><img src="/assets/image-20230901192221520.png" alt="image-20230901192221520"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/demo2&quot;,loadOnStartup = 1)</span><span class="hljs-comment">//loadOnStartup为负整数为默认第一次被访问时创建servlet对象。否则为服务器启动时创建Servlet对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * init()初始化方法</span><br><span class="hljs-comment">     * 1.调用时机：默认情况servlet被第一次访问</span><br><span class="hljs-comment">     * 2.调用次数：只调用一次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletConfig</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供服务</span><br><span class="hljs-comment">     * 1.调用时机：每次servlet被访问时就会被调用</span><br><span class="hljs-comment">     * 2.调用次数：调用n次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletRequest</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletResponse</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;service...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销毁方法</span><br><span class="hljs-comment">     * 1.调用时机：内存释放的时候或者服务器关闭的时候</span><br><span class="hljs-comment">     * 2.调用次数：1次</span><br><span class="hljs-comment">     * 3.需要通过命令行正常关闭才会调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy()&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Servlet方法介绍"><a href="#Servlet方法介绍" class="headerlink" title="Servlet方法介绍"></a>Servlet方法介绍</h2><p><img src="/assets/image-20230901213656178.png" alt="image-20230901213656178"></p><h2 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h2><p><img src="/assets/image-20230901215512726.png" alt="image-20230901215512726"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230901224351165.png" alt="image-20230901224351165"><img src="/assets/image-20230901224402545.png" alt="image-20230901224402545"></p><ol><li><p>HttpServlet中为什么要根据请求方式的不同，调用不同方法？</p><blockquote><ol><li>继承HttpServlet</li><li>重写doGet()和doPost()</li></ol></blockquote></li><li><p>如何调用？</p><blockquote><p>获取请求方式，并根据不同的请求方式，调用不同的doXxx方法</p></blockquote></li></ol><h2 id="Servlet-urlPattern配置"><a href="#Servlet-urlPattern配置" class="headerlink" title="Servlet urlPattern配置"></a>Servlet urlPattern配置</h2><p>Servlet要被访问，就必须配置访问路径</p><ol><li><p>一个Servlet，可以配置多个urlPattern</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &#123;&quot;/demo1&quot;,&quot;/demo2&quot;,&quot;/demo3&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>urlServlet配置规则</p><ol><li><p>精确匹配</p><p><img src="/assets/image-20230902001851846.png" alt="image-20230902001851846"></p></li><li><p>目录匹配</p><p><img src="/assets/image-20230902001934015.png" alt="image-20230902001934015"></p></li><li><p>扩展名匹配</p><p><img src="/assets/image-20230902002039156.png" alt="image-20230902002039156"></p></li><li><p>任意匹配</p><p><img src="/assets/image-20230902002050729.png" alt="image-20230902002050729"></p></li></ol></li></ol><p>&#x2F;和&#x2F;*的区别</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs qml">项目中Servlet配置了<span class="hljs-string">&#x27;/&#x27;</span>，会覆盖掉tomcat中的DefaultServlet，当其他的<span class="hljs-built_in">url</span>-pattern都匹配不上时都会走这个Servlet。<br>当我们的项目中配置了<span class="hljs-string">&#x27;/*&#x27;</span>，意味着匹配任意访问路径。<br>DefaultServlet会覆盖项目中的所有静态资源，如果被覆盖，则无法访问静态资源。<br></code></pre></td></tr></table></figure><blockquote><p>优先级：精确路径 &gt; 目录路径 &gt; 扩展名路径 &gt; &#x2F;* &gt; &#x2F; </p></blockquote><h2 id="XML配置方式编写Servlet"><a href="#XML配置方式编写Servlet" class="headerlink" title="XML配置方式编写Servlet"></a>XML配置方式编写Servlet</h2><p><img src="/assets/image-20230902094004848.png" alt="image-20230902094004848"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/2_Apache_Tomcat/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/2_Apache_Tomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>概念：Tomcat是Apache软件基金会一个核心项目，是一个开源免费的<strong>轻量级Web服务器</strong>，支持Servlet&#x2F;JSP少量JavaEE规范。</p></li><li><p>JavaEE：Java Enterprise Edition Java企业版。包含13项技术规范：</p><p>JDBC,JNDI,EJB,JSP,Servlet,XML,JMS,JAVA IDL,JTS,JTA,JavaMail,JAF</p></li></ul><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><ol><li>Web服务器的作用？封装HTTP协议操作，简化开发。可将web项目部署到服务器，对外提供网上浏览服务。</li><li>Tomcat是一个轻量级的web服务器，支持Servlet&#x2F;JSP少量JavaEE规范，也称Web容器，Servlet容器。</li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="/assets/image-20230901080720741.png" alt="image-20230901080720741"><img src="/assets/image-20230901080943294.png" alt="image-20230901080943294"></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>直接删除目录即可</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>双击bin\startup.bat</p><p><img src="/assets/image-20230901081342172.png" alt="image-20230901081342172"></p><p><img src="/assets/image-20230901081241009.png" alt="image-20230901081241009"></p><p>解决乱码问题:在conf&#x2F;logging.properties</p><p><img src="/assets/image-20230901081725216.png" alt="image-20230901081725216"><img src="/assets/image-20230901081833397.png" alt="image-20230901081833397"></p><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><ol><li>直接×掉运行窗口：强制关闭</li><li>bin\shutdown.bat:正常关闭</li><li>Ctrl+C:正常关闭</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改端口号：conf&#x2F;server.xml</p><p><img src="/assets/image-20230901082046824.png" alt="image-20230901082046824"></p><p><img src="/assets/image-20230901082210477.png" alt="image-20230901082210477"></p><p>HTTP默认端口号为80</p><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><p><img src="/assets/image-20230901082426150.png" alt="image-20230901082426150"></p><p><img src="/assets/image-20230901082532643.png" alt="image-20230901082532643"></p><h2 id="IDEA创建Maven-web项目"><a href="#IDEA创建Maven-web项目" class="headerlink" title="IDEA创建Maven web项目"></a>IDEA创建Maven web项目</h2><p><img src="/assets/image-20230901082834307.png" alt="image-20230901082834307"></p><p>war打包之后就会在target目录中生成，如下</p><p><img src="/assets/image-20230901082934444.png" alt="image-20230901082934444"></p><p><img src="/assets/image-20230901083425622.png" alt="image-20230901083425622"></p><p>编译后的java字节码文件和resource的资源文件放到WEB-INF的classes目录中，pom.xml依赖坐标对应的jar包会放入WEB-INF的lib目录中</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="/assets/image-20230901083706828.png" alt="image-20230901083706828"></p><p><img src="/assets/image-20230901083746740.png" alt="image-20230901083746740"></p><p><img src="/assets/image-20230901084500747.png" alt="image-20230901084500747"></p><p><img src="/assets/image-20230901084614107.png" alt="image-20230901084614107"></p><p><img src="/assets/image-20230901084633362.png" alt="image-20230901084633362"></p><p><img src="/assets/image-20230901084652060.png" alt="image-20230901084652060"></p><h2 id="IDEA集成本地Tomcat"><a href="#IDEA集成本地Tomcat" class="headerlink" title="IDEA集成本地Tomcat"></a>IDEA集成本地Tomcat</h2><p><img src="/assets/image-20230901084959883.png" alt="image-20230901084959883"></p><p><img src="/assets/image-20230901085453488.png" alt="image-20230901085453488"></p><p><img src="/assets/image-20230901085429942.png" alt="image-20230901085429942"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>会话跟踪</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/5_%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/5_%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h1><p>会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中，可以包含多次请求和响应。</p><p><img src="/assets/image-20230902203541003.png" alt="image-20230902203541003"></p><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求之间的数据共享。</p><p><img src="/assets/image-20230902204211410.png" alt="image-20230902204211410"></p><p>HTTP协议是无状态的。每次浏览器向服务器请求数据时，服务器都会以此作为新的请求，因此我们需要会话跟踪技术来实现会话内的数据共享。</p><p>实现方式：</p><ol><li>客户端会话跟踪技术：Cookie</li><li>服务端会话跟踪技术：Session</li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Request&amp;&amp;Response</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/4_Request&amp;Response/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/4_Request&amp;Response/</url>
    
    <content type="html"><![CDATA[<h1 id="Request-Response"><a href="#Request-Response" class="headerlink" title="Request&amp;&amp;Response"></a>Request&amp;&amp;Response</h1><p><img src="/assets/image-20230902100816161.png" alt="image-20230902100816161"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;你好,&quot;</span>+ name + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="Request继承体系"><a href="#Request继承体系" class="headerlink" title="Request继承体系"></a>Request继承体系</h3><p><img src="/assets/image-20230902103359677.png" alt="image-20230902103359677"><img src="/assets/image-20230902105751368.png" alt="image-20230902105751368"></p><p>Tomcat解析请求数据，封装为request对象，并且创建request对象传递到service方法中</p><h3 id="Request获取请求数据"><a href="#Request获取请求数据" class="headerlink" title="Request获取请求数据"></a>Request获取请求数据</h3><p>请求数据分为三部分：</p><ol><li><p>请求行：GET&#x2F;requestDemo&#x2F;req?username&#x3D;zhangsan HTTP&#x2F;1.1</p><blockquote><p>String getMethod():获取请求方式：GET<br>String getContextPath():获取虚拟目录（项目访问路径）：&#x2F;requestDemo<br>StringBuffer getRequestURL():获取URL(统一资源定位符)：http:&#x2F;localhost::8080&#x2F;requestDemo&#x2F;req<br>String getRequestURI():(获取URI(统一资源标识符)：&#x2F;requestDemo&#x2F;req<br>String getQueryString():获取请求参数(GET方式)：username&#x3D;zhangsan</p></blockquote></li><li><p>请求头：User-Agent:Mozilla&#x2F;5.0 Chrome&#x2F;91.0.4472.106</p><blockquote><p>String getHeader(String name):根据请求头名称，获取值</p></blockquote></li><li><p>请求体：username&#x3D;zhangsan</p><blockquote><p>ServletInputStream getInputStream()：获取字节输入流</p><p>BufferedReader getReader()：获取字符输入流</p></blockquote></li></ol><h3 id="Request通用方式获取请求参数"><a href="#Request通用方式获取请求参数" class="headerlink" title="Request通用方式获取请求参数"></a>Request通用方式获取请求参数</h3><p><img src="/assets/image-20230902113609955.png" alt="image-20230902113609955"></p><blockquote><p>GET请求方式和POST请求方式区别主要在于获取请求参数的方式不一样，是否可以提供一种统一获取请求参数的方式，从而统一doGet和doPost方法内的代码？</p></blockquote><p><img src="/assets/image-20230902113849619.png" alt="image-20230902113849619"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">//        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="hljs-comment">//        for (String key : parameterMap.keySet()) &#123;</span><br><span class="hljs-comment">//            System.out.print(key + &quot;:&quot;);</span><br><span class="hljs-comment">//            String[] strings = parameterMap.get(key);</span><br><span class="hljs-comment">//            Arrays.stream(strings).forEach(System.out::print);</span><br><span class="hljs-comment">//            System.out.println();</span><br><span class="hljs-comment">//        &#125;</span><br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>        Arrays.stream(req.getParameterValues(<span class="hljs-string">&quot;cb&quot;</span>)).forEach(System.out::print);<br><span class="hljs-comment">//        resp.sendRedirect(&quot;http://www.baidu.com&quot;);</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Request请求参数中文乱码处理"><a href="#Request请求参数中文乱码处理" class="headerlink" title="Request请求参数中文乱码处理"></a>Request请求参数中文乱码处理</h3><p>第一种</p><ol><li>表单方法设置为POST</li><li>在post方法中调用get方法，在get方法中调用<code>req.setCharacterEncoding(&quot;UTF-8&quot;);</code></li></ol><p>第二种</p><p><img src="/assets/image-20230902121809378.png" alt="image-20230902121809378"></p><p>URL编码是将字符串按照编码方式转化为二进制，每个字节转为2个16进制并在前面加上%</p><p><img src="/assets/image-20230902122730170.png" alt="image-20230902122730170"></p><p>浏览器将字符转化为二进制码，（每个字节占8个二进制位）将每个字节转为2个16进制并在前面加上%，即为URL编码，URL编码由浏览器传递到web服务器后，web服务器（Tomcat）将URL以ISO-8859-1进行URL解码，而不是UTF-8，此解码方式无法配置。</p><p>因此解决方案是将web服务器的解码再一次转为二进制数据，再以UTF-8进行URL解码出所需的字符串。</p><h3 id="Request请求转发"><a href="#Request请求转发" class="headerlink" title="Request请求转发"></a>Request请求转发</h3><p><img src="/assets/image-20230902141635604.png" alt="image-20230902141635604"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">req.getRequestDispatcher(<span class="hljs-string">&quot;转发路径&quot;</span>).forward(req,resp);<br></code></pre></td></tr></table></figure><p>请求转发资源间共享数据，使用Request对象</p><p><img src="/assets/image-20230902142727072.png" alt="image-20230902142727072"></p><p><img src="/assets/image-20230902143700297.png" alt="image-20230902143700297"></p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p><img src="/assets/image-20230902143833545.png" alt="image-20230902143833545"></p><h3 id="Response设置响应数据功能介绍"><a href="#Response设置响应数据功能介绍" class="headerlink" title="Response设置响应数据功能介绍"></a>Response设置响应数据功能介绍</h3><p><img src="/assets/image-20230902144028924.png" alt="image-20230902144028924"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">设置响应状态码：<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> sc)</span></span>;<br>设置响应头键值对: <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> key,<span class="hljs-type">String</span> value)</span></span>;<br>对响应体：获取字符输出流：<span class="hljs-function">PrintWriter <span class="hljs-title">getWriter</span><span class="hljs-params">()</span></span>;<br>获取字节输出流：<span class="hljs-function">ServletOutputStream <span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="Response完成重定向"><a href="#Response完成重定向" class="headerlink" title="Response完成重定向"></a>Response完成重定向</h3><p>重定向：一种资源跳转方式</p><p><img src="/assets/image-20230902145600398.png" alt="image-20230902145600398"></p><p><img src="/assets/image-20230902150623532.png" alt="image-20230902150623532"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        重定向</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;/ReqRespDemo/resp2&quot;</span>);<br><span class="hljs-comment">//        重定向简化</span><br>        resp.sendRedirect(<span class="hljs-string">&quot;/ReqRespDemo/resp2&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>重定向的特点</strong></p><ul><li>浏览器地址栏路径发生变化</li><li>可以重定向到任意位置的资源（服务器内部、外部均可）</li><li>两次请求，不能在多个资源使用request共享数据</li></ul><p><strong>转发的特点</strong></p><ul><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器的内部资源</li><li>一次请求，可以在转发的资源间使用request共享数据</li></ul><p><strong>路径问题</strong></p><ul><li><strong>明确路径谁使用</strong><ul><li>浏览器使用：需要加虚拟目录（项目访问路径）</li><li>服务器使用：不需要加虚拟目录</li></ul></li></ul><p><img src="/assets/image-20230902164533277.png" alt="image-20230902164533277"></p><ol><li>需要虚拟目录</li><li>需要虚拟目录</li><li>不加虚拟目录</li><li>需要虚拟目录</li></ol><ul><li><strong>动态获取虚拟目录</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> req.getContextPath();<br><span class="hljs-comment">//        重定向简化</span><br>        resp.sendRedirect(contextPath + <span class="hljs-string">&quot;/resp2&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="Response响应字符数据"><a href="#Response响应字符数据" class="headerlink" title="Response响应字符数据"></a>Response响应字符数据</h3><p><img src="/assets/image-20230902170253919.png" alt="image-20230902170253919"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 响应头的content-type默认为text/html;charset=ISO-8859-1</span><br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;Response3&lt;/h&gt;&quot;</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;你好&lt;/h1&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><p><em>&#x2F;&#x2F;</em>        <em>细节：流不需要手动关闭</em></p><h3 id="Response响应字节数据"><a href="#Response响应字节数据" class="headerlink" title="Response响应字节数据"></a>Response响应字节数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\Employment_Readiness\\黑马-WEB\\ReqRespDemo\\src\\main\\resources\\anya.jpg&quot;</span>));<br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>    <span class="hljs-keyword">while</span> ((len = bis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>        os.write(bytes,<span class="hljs-number">0</span>,len);<br>    &#125;<br>    bis.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>字节传输技巧：由工具类commons-io</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">IOUtils.copy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\\\Employment_Readiness\\\\黑马-WEB\\\\ReqRespDemo\\\\src\\\\main\\\\resources\\\\anya.jpg&quot;</span>)),resp.getOutputStream());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Session</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/7_Session/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/7_Session/</url>
    
    <content type="html"><![CDATA[<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><ul><li>服务端会话跟踪技术，将数据保存到服务端</li><li>JavaEE提供了HttpSession接口，来实现一次会话的多次请求间数据共享功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/session1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        session.setAttribute(<span class="hljs-string">&quot;SessionUsername&quot;</span>,<span class="hljs-string">&quot;LiHua&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/session2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        System.out.println(session.getAttribute(<span class="hljs-string">&quot;SessionUsername&quot;</span>).toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Session原理"><a href="#Session原理" class="headerlink" title="Session原理"></a>Session原理</h2><ul><li>Session是基于Cookie实现的</li><li><img src="/assets/image-20230903123025455.png" alt="image-20230903123025455"></li></ul><p>我的理解：</p><blockquote><p>客户端浏览器访问&#x2F;demo1请求获取服务端的session，服务端收到请求后，服务端创建了一个session对象，并且该对象拥有唯一的标识id，&#x2F;demo1的数据存放到该session对象中，服务器向客户端浏览器响应，将session标识id作为Cookie发送给客户端浏览器，即set-cookie:JSESSIONID，客户端浏览器将这个Cookie存放到浏览器内存中。当该客户端浏览器再一次访问服务端时携带JSESSIONID，服务端获取到cookie值也就是JSESSIONID，服务端将在内存中查找是否存在匹配的Session对象，如果有则使用，否则创建新的Session对象</p></blockquote><h2 id="Session的使用细节"><a href="#Session的使用细节" class="headerlink" title="Session的使用细节"></a>Session的使用细节</h2><ul><li><p>Session钝化，活化</p><ul><li><p>服务器重启后，Session中的数据是否存在？</p><ul><li><p>钝化：服务器正常关闭后，Tomcat会自动将Session数据写入硬盘的文件中。</p><p><img src="/assets/image-20230903131306044.png" alt="image-20230903131306044"></p></li><li><p>活化：再次启动服务器后，从文件中加载数据到Session中</p></li><li><p>当浏览器关闭后，浏览器的从服务端响应到的Cookie消失，但服务端对应的Session对象仍保留</p></li></ul></li></ul></li><li><p>Session销毁</p><ul><li><p>默认情况下，session对象最后一次调用的30分钟自动销毁</p><p><img src="/assets/image-20230903131929014.png" alt="image-20230903131929014"></p></li><li><p>调用Session对象的invalidate()方法</p></li></ul></li></ul><p><img src="/assets/image-20230903132357992.png" alt="image-20230903132357992"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>验证码工具类</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/8_%E9%AA%8C%E8%AF%81%E7%A0%81%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/8_%E9%AA%8C%E8%AF%81%E7%A0%81%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="验证码工具类"><a href="#验证码工具类" class="headerlink" title="验证码工具类"></a>验证码工具类</h1><p>Hutool</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">LineCaptcha</span> <span class="hljs-variable">lineCaptcha</span> <span class="hljs-operator">=</span> CaptchaUtil.createLineCaptcha(<span class="hljs-number">100</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">25</span>);<br>        lineCaptcha.write(<span class="hljs-string">&quot;D:\\Employment_Readiness\\黑马-WEB\\CookieDemo\\src\\main\\resources\\x.png&quot;</span>);<br><span class="hljs-comment">//        or</span><br>        lineCaptcha.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Employment_Readiness\\黑马-WEB\\CookieDemo\\src\\main\\resources\\x1.jpg&quot;</span>)));<br>        System.out.println(lineCaptcha.getCode());<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230903171309340.png" alt="image-20230903171309340"></p><p><img src="/assets/image-20230903171314981.png" alt="image-20230903171314981"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Filter过滤器</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/9_Filter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/9_Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><p>过滤器可以将资源的请求拦截下来，从而实现一些特殊功能。</p><p>过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等等</p><p><img src="/assets/image-20230903171636201.png" alt="image-20230903171636201"></p><h2 id="Filter快速入门"><a href="#Filter快速入门" class="headerlink" title="Filter快速入门"></a>Filter快速入门</h2><ol><li><p>定义类，实现Filter接口，并重写其方法</p><p><img src="/assets/image-20230903192327048.png" alt="image-20230903192327048"></p></li><li><p>配置Filter拦截资源的路径，在类上定义@WebFilter注解</p><p><img src="/assets/image-20230903192758865.png" alt="image-20230903192758865"></p></li><li><p>在doFilter方法结束，并放行</p><p><img src="/assets/image-20230903192854039.png" alt="image-20230903192854039"></p></li></ol><h2 id="Filter执行流程"><a href="#Filter执行流程" class="headerlink" title="Filter执行流程"></a>Filter执行流程</h2><p><img src="/assets/image-20230903193511737.png" alt="image-20230903193511737"></p><ol><li>放行后，访问对应资源，资源访问完成后，还会回到Filter中吗？</li></ol><blockquote><p>会</p></blockquote><ol start="2"><li><p>如果回到Filter中，是从头执行还是执行放行后的逻辑？</p><blockquote><p>放行后的逻辑</p></blockquote></li><li><p>执行顺序：</p></li></ol><blockquote><p>执行放行之前的逻辑-》放行-》访问资源-》执行放行后逻辑</p></blockquote><p>​<img src="/assets/image-20230903194831844.png" alt="image-20230903194831844"></p><h2 id="Filter使用细节"><a href="#Filter使用细节" class="headerlink" title="Filter使用细节"></a>Filter使用细节</h2><h3 id="拦截路径配置"><a href="#拦截路径配置" class="headerlink" title="拦截路径配置"></a>拦截路径配置</h3><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><ul><li>拦截具体的资源：&#x2F;index.jsp: 只有访问index.jsp时才会被拦截。</li><li>目录拦截：&#x2F;user&#x2F;: 访问&#x2F;user下的所有资源，都会被拦截。</li><li>后缀名拦截：*.jsp：访问后缀名为jsp的资源，都会被拦截。</li><li>拦截所有：&#x2F;*：访问所有资源，都会被拦截。</li></ul><blockquote><p>一个WEB应用，可配置多个过滤器，这多个过滤器称为过滤器链</p><p>注解配置的Filter，优先级按照类名的自然排序</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Cookie</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/6_Cookie/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/6_Cookie/</url>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie基本使用"><a href="#Cookie基本使用" class="headerlink" title="Cookie基本使用"></a>Cookie基本使用</h2><p>数据保存在<strong>客户端</strong>，每次请求都携带Cookie数据进行访问</p><p><img src="/assets/image-20230902211121274.png" alt="image-20230902211121274"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>);<br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230902212437077.png" alt="image-20230902212437077"></p><p><img src="/assets/image-20230902212721661.png" alt="image-20230902212721661"></p><blockquote><p>为什么服务端只能在客户端获取从服务端发送的cookie，而不能获取非服务端发送的其他cookie呢</p></blockquote><p>服务端只能获取从服务端发送的Cookie，以及客户端将这些Cookie随后发送回服务器的Cookie，是由于浏览器的安全性和隐私保护机制所决定的。这个限制有以下原因：</p><ol><li>同源策略：浏览器实施了同源策略（Same-Origin Policy），这是一种安全措施，限制了一个网站（或域）的JavaScript代码只能访问与其来源相同的资源。这意味着，JavaScript代码只能访问与网站的域名相同的Cookie。这是为了防止恶意网站访问用户在其他网站上的Cookie数据。</li><li>安全性：Cookie中包含了敏感信息，如用户身份验证令牌。如果服务端可以直接获取所有Cookie，那么恶意的服务端可以轻松地窃取用户在其他网站上的Cookie信息，导致安全问题。</li><li>隐私保护：Cookie中可能包含用户的隐私信息，如浏览历史、偏好设置等。浏览器将这些信息视为用户的隐私，并严格限制对其访问，以保护用户的隐私。</li></ol><p>虽然服务端不能直接获取非服务端发送的其他网站的Cookie，但可以通过合法的手段，如用户授权或者跳转到其他网站来获取特定Cookie信息。例如，OAuth授权流程允许服务端通过重定向用户到第三方认证提供者的页面，获得用户授权后，获取特定的令牌信息。但这些操作通常需要用户的明示同意和合法的授权机制，以确保隐私和安全。</p><h2 id="Cookie原理"><a href="#Cookie原理" class="headerlink" title="Cookie原理"></a>Cookie原理</h2><ul><li>Cookie的实现是基于HTTP协议的<ul><li>响应头：set-cookie</li><li>请求头：cookie</li></ul></li></ul><p><img src="/assets/image-20230902215325907.png" alt="image-20230902215325907"></p><h2 id="Cookie使用细节"><a href="#Cookie使用细节" class="headerlink" title="Cookie使用细节"></a>Cookie使用细节</h2><ul><li><p>Cookie的存活时间</p><ul><li>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁</li><li>持久化修改：setMaxAge(int seconds)<ol><li>正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除</li><li>负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁</li><li>零：删除对应Cookie</li></ol></li></ul></li><li><p>Cookie存储中文</p><ul><li><p>Cookie不能直接存储中文</p></li><li><p>存储方法：转码，URL编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> URLEncoder.encode(value, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;存储数据&quot;</span> + encode);<br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, encode);<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>创建和管理表</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/10_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/%E5%88%9B%E5%BB%BA%E8%A1%A8%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/10_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/%E5%88%9B%E5%BB%BA%E8%A1%A8%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>创建数据库之前为什么不是先创建数据表？</p><blockquote><p>从系统架构的层次看，MYSQL数据库系统从大到小依次是数据库服务器，数据库，数据表，数据表的行与列</p></blockquote><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h3 id="方式1-MYSQL8"><a href="#方式1-MYSQL8" class="headerlink" title="方式1 MYSQL8+"></a>方式1 MYSQL8+</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> DATABASE mytest1<br></code></pre></td></tr></table></figure><p>方式2 MYSQL5</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> TEST9 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;UTF8&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="管理数据库"><a href="#管理数据库" class="headerlink" title="管理数据库"></a>管理数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> TEST10 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;GBK&#x27;</span>;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> TEST10;<br><span class="hljs-comment">-- 切换数据库</span><br>USE test9;<br>USE atguigudb;<br><span class="hljs-comment">-- 查看当前数据库中保存的数据库</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br><span class="hljs-comment">-- 查看当前使用的数据库</span><br><span class="hljs-keyword">SELECT</span> DATABASE();<br><span class="hljs-comment">-- 查看指定数据库下保存的数据表</span><br><span class="hljs-keyword">SHOW</span> TABLES <span class="hljs-keyword">FROM</span> atguigudb;<br><br><span class="hljs-comment">-- 修改数据库</span><br><span class="hljs-keyword">ALTER</span> DATABASE test10 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;UTF8&#x27;</span><br><span class="hljs-comment">-- 删除数据库 DROP通常不可回滚</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> test10;<br><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> MYEMP1;<br></code></pre></td></tr></table></figure><p>创建复制表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 基于现有的表复制出新的表，包括表数据</span><br>USE atguigudb;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employeesCOPY <span class="hljs-keyword">AS</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employeesCOPY;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 基于现有的表复制出新的表，不包括表数据</span><br><span class="hljs-comment">-- 方式1</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employeesCOPY_NULLDATA<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employeesCOPY_NULLDATA;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> employeesCOPY_NULLDATA;<br><span class="hljs-comment">-- 方式2</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employeesCOPY_NULLDATA<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> <span class="hljs-literal">FALSE</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employeesCOPY_NULLDATA;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> employeesCOPY_NULLDATA;<br></code></pre></td></tr></table></figure><h2 id="修改表结构或数据"><a href="#修改表结构或数据" class="headerlink" title="修改表结构或数据"></a>修改表结构或数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改表 ALTER</span><br>USE TEST10;<br><span class="hljs-keyword">DESC</span> employeesCOPY;<br><span class="hljs-comment">-- 添加一个字段属性</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY <br><span class="hljs-keyword">ADD</span> completement <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>); #默认添加到表中最后的字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY <br><span class="hljs-keyword">ADD</span> phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">FIRST</span>;<br><span class="hljs-comment">-- 修改一个字段，数据类型，长度，默认值</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY<br>MODIFY phone_number <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY<br>MODIFY emp_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">34</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;AAA&#x27;</span>;<br><span class="hljs-comment">-- 重命名字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY<br>CHANGE salary month_salary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">-- 删除字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> phone;<br><span class="hljs-comment">-- 重命名表</span><br>RENAME <span class="hljs-keyword">TABLE</span> employeesCOPY <span class="hljs-keyword">TO</span> EMPCOPY;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> EMPCOPY<br>RENAME <span class="hljs-keyword">TO</span> ECP;<br><span class="hljs-comment">-- 删除表 不光表结构做了删除，表中数据也删除了</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> ECP;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> ECP;<br><span class="hljs-comment">-- 清空表 删除表中所有数据，释放表中的存储空间，保留表结构</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> ECP;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 和 <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 异同点<br>相同点:都可以清除表中所有数据删除,同时保留表结构<br>不同点:<span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 一旦操作,表数据全部清除,同时数据是不可以回滚的,但不删除结构<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span>一旦执行此操作,表数据可以全部删除,但数据是可以回滚的.<br><br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="DCL-事务-中COMMIT和ROLLBACK"><a href="#DCL-事务-中COMMIT和ROLLBACK" class="headerlink" title="DCL(事务)中COMMIT和ROLLBACK"></a>DCL(事务)中COMMIT和ROLLBACK</h2><blockquote><p>COMMIT提交数据，一旦执行COMMIT，则数据就被永久保存在数据库中，数据不可以回滚。</p></blockquote><blockquote><p>ROLLBACK回滚数据,一单执行ROLLBACK,则可以实现数据的回滚,回滚到最近的一次COMMIT之后</p></blockquote><h2 id="DDL和DML的说明"><a href="#DDL和DML的说明" class="headerlink" title="DDL和DML的说明"></a>DDL和DML的说明</h2><ol><li>DDL操作一旦执行,不可回滚,指令SET autucommit &#x3D; FALSE会对DDL操作失效(因为在执行完DDL操作之后,一定会执行一次COMMIT,而COMMIT操作不受SET autocommit &#x3D; false限制)</li><li>DML默认情况下,也不可回滚,但是在执行DML之前执行了SET autocommit &#x3D; FALSE,则可以实现回滚.</li><li>一旦执行提交,就无法回滚到提交前的状态</li></ol><p>DML-&gt;DROP</p><p>DDL-&gt;TRUNCATE</p><p>DCL-&gt;COMMIT&#x2F;ROLLBACK</p><h3 id="MYSQL5-vs-8的DDL原子化"><a href="#MYSQL5-vs-8的DDL原子化" class="headerlink" title="MYSQL5 vs 8的DDL原子化"></a>MYSQL5 vs 8的DDL原子化</h3><blockquote><p>MYSQL5中<code>DROP TABLE t1,不存在的t2</code>时,报错但对t1成功删除</p></blockquote><blockquote><p>而在MYSQL8中<code>DROP TABLE t1,不存在的t2</code>时,报错且不会对t1删除,因为在MYSQL对报错过程进行事务回滚</p></blockquote><h2 id="面试题-想要彻底删除数据表中某条数据时要用TRUNCATE还是DELETE"><a href="#面试题-想要彻底删除数据表中某条数据时要用TRUNCATE还是DELETE" class="headerlink" title="面试题:想要彻底删除数据表中某条数据时要用TRUNCATE还是DELETE ?"></a>面试题:想要彻底删除数据表中某条数据时要用TRUNCATE还是DELETE ?</h2><blockquote><p>【参考】TRUNCATE TABLE比DELETE速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发TRIGGER,有可能造成事故，故不建议在开发代码中使用此语句。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>增删改查DML</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/11_%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5DML/CRUD/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/11_%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5DML/CRUD/</url>
    
    <content type="html"><![CDATA[<h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(emp_id,emp_name)<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1001</span>,<span class="hljs-string">&#x27;shkstart&#x27;</span>),<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;atguigu&#x27;</span>),<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (<span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>);<br><br><span class="hljs-comment">-- </span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name(column1 [, column2, …, columnn])<br><span class="hljs-keyword">VALUES</span><br>(value1 [value2, …, valuen]),<br>(value1 [value2, …, valuen]),<br>……<br>(value1 [value2, …, valuen]);<br><br><span class="hljs-comment">-- </span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 目标表名<br>(tar_column1 [, tar_column2, …, tar_columnn])<br><span class="hljs-keyword">SELECT</span><br>(src_column1 [, src_column2, …, src_columnn])<br><span class="hljs-keyword">FROM</span> 源表名<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br></code></pre></td></tr></table></figure><blockquote><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入多行。</p></blockquote><ul><li>在 INSERT 语句中加入子查询。</li><li><strong>不必书写VALUES子句。</strong></li><li>子查询中的值列表应与 INSERT 子句中的列名对应。</li></ul><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">UPDATE</span> table_name<br><span class="hljs-keyword">SET</span> column1<span class="hljs-operator">=</span>value1, column2<span class="hljs-operator">=</span>value2, … , <span class="hljs-keyword">column</span><span class="hljs-operator">=</span>valuen<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br><br><span class="hljs-keyword">UPDATE</span> employees<br><span class="hljs-keyword">SET</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">70</span><br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">113</span>;<br></code></pre></td></tr></table></figure><p>如果省略 WHERE 子句，则表中的所有数据都将被更新。</p><ul><li>可以一次更新<strong>多条</strong>数据。</li><li>如果需要回滚数据，需要保证在DML前，进行设置：<strong>SET AUTOCOMMIT &#x3D; FALSE;</strong></li></ul><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">condition</span><span class="hljs-operator">&gt;</span>];<br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> departments<br><span class="hljs-keyword">WHERE</span> department_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Finance&#x27;</span>;<br><br>## 如果省略 <span class="hljs-keyword">WHERE</span> 子句，则表中的全部数据将被删除<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> copy_emp;<br></code></pre></td></tr></table></figure><h2 id="MySQL8新特性：计算列"><a href="#MySQL8新特性：计算列" class="headerlink" title="MySQL8新特性：计算列"></a>MySQL8新特性：计算列</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb1(<br>id <span class="hljs-type">INT</span>,<br>a <span class="hljs-type">INT</span>,<br>b <span class="hljs-type">INT</span>,<br>c <span class="hljs-type">INT</span> <span class="hljs-keyword">GENERATED</span> <span class="hljs-keyword">ALWAYS</span> <span class="hljs-keyword">AS</span> (a + b) VIRTUAL<br>);<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">c <span class="hljs-type">INT</span> <span class="hljs-keyword">GENERATED</span> <span class="hljs-keyword">ALWAYS</span> <span class="hljs-keyword">AS</span> (a + b) VIRTUAL<br></code></pre></td></tr></table></figure><p>为计算列</p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>存储过程与函数</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/15_%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/15_%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="存储过程与函数"><a href="#存储过程与函数" class="headerlink" title="存储过程与函数"></a><strong>存储过程与函数</strong></h1><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 存储过程名(<span class="hljs-keyword">IN</span><span class="hljs-operator">|</span><span class="hljs-keyword">OUT</span><span class="hljs-operator">|</span><span class="hljs-keyword">INOUT</span> 参数名 参数类型,...)<br>[characteristics ...]<br><span class="hljs-keyword">BEGIN</span><br>存储过程体<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><ul><li>IN:为输入参数，有输入无返回，默认</li><li>OUT:当前参数为输出，有返回无输入</li><li>INOUT:有输入有返回</li></ul><p><strong>阿里巴巴规范不建议写存储过程</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- navicat 存储过程包含在函数里，也不改结束符号</span><br><span class="hljs-comment">-- 类型1 无参数无返回值</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> select_all_data()<br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">END</span>;<br><br><span class="hljs-comment">-- 存储过程的调用</span><br><span class="hljs-keyword">CALL</span> select_all_data();<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> avg_employee_salary()<br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(SALARY) <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">CALL</span> avg_employee_salary();<br><span class="hljs-comment">-- 类型2 带out</span><br><span class="hljs-keyword">DESC</span> employees;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_min_salary(<span class="hljs-keyword">OUT</span> MS <span class="hljs-keyword">double</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(SALARY) <span class="hljs-keyword">INTO</span> MS<br><span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">CALL</span> show_min_salary(<span class="hljs-variable">@MS</span>);<br><span class="hljs-comment">-- 查看变量值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@MS</span>;<br><span class="hljs-comment">-- 类型3 带IN</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_someone_salary(<span class="hljs-keyword">IN</span> EMPNAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> SALARY <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> EMPNAME;<br><span class="hljs-keyword">END</span>;<br><span class="hljs-comment">-- 调用方式1</span><br><span class="hljs-keyword">CALL</span> show_someone_salary(<span class="hljs-string">&#x27;King&#x27;</span>);<br><span class="hljs-comment">-- 调用方式2</span><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@EMPNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br><span class="hljs-keyword">CALL</span> show_someone_salary(<span class="hljs-variable">@EMPNAME</span>);<br><br><span class="hljs-comment">-- 类型4 带IN和OUT</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_someone_salary2(<span class="hljs-keyword">IN</span> empname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<span class="hljs-keyword">OUT</span> empsalary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>))<br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">INTO</span> empsalary <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> empname;  <br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">CALL</span> show_someone_salary2(<span class="hljs-string">&#x27;Abel&#x27;</span>,<span class="hljs-variable">@ES</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@ES</span>;<br><span class="hljs-comment">-- 类型5 带INOUT</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_mgr_name(<span class="hljs-keyword">INOUT</span> empname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> manager_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> empname<br>);<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@EMPNAME</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br><span class="hljs-keyword">CALL</span> show_mgr_name(<span class="hljs-variable">@EMPNAME</span>);<br></code></pre></td></tr></table></figure><h2 id="存储函数的使用"><a href="#存储函数的使用" class="headerlink" title="存储函数的使用"></a>存储函数的使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> 函数名(参数名 参数类型,...)<br><span class="hljs-keyword">RETURNS</span> 返回值类型<br>[characteristics ...]<br><span class="hljs-keyword">BEGIN</span><br>函数体 #函数体中肯定有 <span class="hljs-keyword">RETURN</span> 语句<br><span class="hljs-keyword">END</span><br><br><span class="hljs-number">1</span>、参数列表：指定参数为<span class="hljs-keyword">IN</span>、<span class="hljs-keyword">OUT</span>或<span class="hljs-keyword">INOUT</span>只对<span class="hljs-keyword">PROCEDURE</span>是合法的，<span class="hljs-keyword">FUNCTION</span>中总是默认为<span class="hljs-keyword">IN</span>参<br>数。<br></code></pre></td></tr></table></figure><blockquote><p>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型字符串型。</p></blockquote><p>错误实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> email_by_name()<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">RETURN</span>(<span class="hljs-keyword">SELECT</span> email <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><blockquote><p>1418 - This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you <em>might</em> want to use the less safe log_bin_trust_function_creators variable)</p></blockquote><p>方式1：补全特征</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> email_by_name()<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>) <br><span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-keyword">CONTAINS</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">READS</span> <span class="hljs-keyword">SQL</span> DATA<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">RETURN</span>(<span class="hljs-keyword">SELECT</span> email <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>方式2：配置全局变量</p><p><img src="/assets/image-20230830144649022.png" alt="image-20230830144649022"></p><h2 id="对比存储函数和存储过程"><a href="#对比存储函数和存储过程" class="headerlink" title="对比存储函数和存储过程"></a>对比存储函数和存储过程</h2><p><img src="/assets/image-20230830193454074.png" alt="image-20230830193454074"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>视图View</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/14_%E8%A7%86%E5%9B%BE/%E8%A7%86%E5%9B%BE/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/14_%E8%A7%86%E5%9B%BE/%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="视图的理解"><a href="#视图的理解" class="headerlink" title="视图的理解"></a>视图的理解</h2><ul><li>可以看作是一个虚拟表，本身不存储数据，本质是可以存储起来的SELECT语句。</li><li>视图中SELECT语句涉及的表称为基表</li><li>针对视图做DML操作，会影响到对应的基表中的数据。反之亦然。</li><li>视图本身的删除，不会导致基表中数据的删除。</li><li>视图的应用场景：针对于小型项目，不推荐使用视图。针对于大型项目，可以考虑使用视图。</li><li>优点：简化查询。控制数据的访问。</li></ul><h2 id="具体格式"><a href="#具体格式" class="headerlink" title="具体格式"></a>具体格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> REPLACE]<br>[ALGORITHM <span class="hljs-operator">=</span> &#123;UNDEFINED <span class="hljs-operator">|</span> <span class="hljs-keyword">MERGE</span> <span class="hljs-operator">|</span> TEMPTABLE&#125;]<br><span class="hljs-keyword">VIEW</span> 视图名称 [(字段列表)]<br><span class="hljs-keyword">AS</span> 查询语句<br>[<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span><span class="hljs-operator">|</span><span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> OPTION]<br></code></pre></td></tr></table></figure><h2 id="简化格式"><a href="#简化格式" class="headerlink" title="简化格式"></a>简化格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> 视图名称<br><span class="hljs-keyword">AS</span> 查询语句<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> VIEW1<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees;<br><br>#查询视图<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> VIEW1<br></code></pre></td></tr></table></figure><h3 id="创建单表视图"><a href="#创建单表视图" class="headerlink" title="创建单表视图"></a>创建单表视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_year_salary (ename,year_salary)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> ename,salary<span class="hljs-operator">*</span><span class="hljs-number">12</span><span class="hljs-operator">*</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>IFNULL(commission_pct,<span class="hljs-number">0</span>))<br><span class="hljs-keyword">FROM</span> t_employee;<br></code></pre></td></tr></table></figure><blockquote><p>实际上就是我们在 SQL 查询语句的基础上封装了视图 VIEW，这样就会基于 SQL 语句的结果集形成一张虚拟表。</p></blockquote><blockquote><p>在创建视图时，没有在视图名后面指定字段列表，则视图中字段列表默认和SELECT语句中的字段列表一致。如果SELECT语句中给字段取了别名，那么视图中的字段名和别名相同</p></blockquote><h3 id="创建多表联合视图"><a href="#创建多表联合视图" class="headerlink" title="创建多表联合视图"></a>创建多表联合视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> empview<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> employee_id emp_id,last_name NAME,department_name<br><span class="hljs-keyword">FROM</span> employees e,departments d<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br></code></pre></td></tr></table></figure><ul><li>利用视图对数据进行格式化</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_depart<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> CONCAT(last_name,<span class="hljs-string">&#x27;(&#x27;</span>,department_name,<span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">AS</span> emp_dept<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id<br></code></pre></td></tr></table></figure><h3 id="基于视图创建视图"><a href="#基于视图创建视图" class="headerlink" title="基于视图创建视图"></a>基于视图创建视图</h3><p>当我们创建好一张视图之后，还可以在它的基础上继续创建视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_dept_ysalary<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> emp_dept.ename,dname,year_salary<br><span class="hljs-keyword">FROM</span> emp_dept <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> emp_year_salary<br><span class="hljs-keyword">ON</span> emp_dept.ename <span class="hljs-operator">=</span> emp_year_salary.ename;<br></code></pre></td></tr></table></figure><h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><p>语法1：查看数据库的表对象、视图对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><p>语法2：查看视图的结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> <span class="hljs-operator">/</span> <span class="hljs-keyword">DESCRIBE</span> 视图名称;<br></code></pre></td></tr></table></figure><p>语法3：查看视图的属性信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;视图名称&#x27;</span>;<br></code></pre></td></tr></table></figure><p>执行结果显示，注释Comment为VIEW，说明该表为视图，其他的信息为NULL，说明这是一个虚表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> 视图名称;<br></code></pre></td></tr></table></figure><h2 id="更新视图的数据"><a href="#更新视图的数据" class="headerlink" title="更新视图的数据"></a><strong>更新视图的数据</strong></h2><p>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。</p><p>不可更新的视图：</p><ol><li>在定义视图的时候指定了“ALGORITHM &#x3D; TEMPTABLE”，视图将不支持INSERT和DELETE操作；</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；</li><li>在定义视图的SELECT语句中使用了 JOIN联合查询 ，视图将不支持INSERT和DELETE操作；</li><li>在定义视图的SELECT语句后的字段列表中使用了 数学表达式 或 子查询 ，视图将不支持INSERT，也不支持UPDATE使用了数学表达式、子查询的字段值；</li><li>在定义视图的SELECT语句后的字段列表中使用 DISTINCT 、 聚合函数 、 GROUP BY 、 HAVING 、UNION 等，视图将不支持INSERT、UPDATE、DELETE；</li></ol><h2 id="修改、删除视图"><a href="#修改、删除视图" class="headerlink" title="修改、删除视图"></a>修改、删除视图</h2><p>方式一：</p><p>使用CREATE OR REPLACE VIEW 子句<strong>修改视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">VIEW</span> empvu80<br>(id_number, name, sal, department_id)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> employee_id, first_name <span class="hljs-operator">||</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-operator">||</span> last_name, salary, department_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br></code></pre></td></tr></table></figure><blockquote><p>说明：CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p></blockquote><p>方式二：</p><p>ALTER VIEW</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> 视图名称<br><span class="hljs-keyword">AS</span><br>查询语句<br></code></pre></td></tr></table></figure><p>删除视图的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> IF <span class="hljs-keyword">EXISTS</span> 视图名称;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>约束Constraint</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/13_%E7%BA%A6%E6%9D%9F/%E7%BA%A6%E6%9D%9F/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/13_%E7%BA%A6%E6%9D%9F/%E7%BA%A6%E6%9D%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="约束Constraint-概述"><a href="#约束Constraint-概述" class="headerlink" title="约束Constraint 概述"></a>约束Constraint 概述</h2><h3 id="为什么需要约束"><a href="#为什么需要约束" class="headerlink" title="为什么需要约束"></a>为什么需要约束</h3><p>数据完整性是指数据的精确性和可靠性。<strong>为了保证数据的完整性</strong>，SQL规范以约束的方式对表数据进行额外的条件限制。</p><ul><li><code>实体完整性</code>：同一个表中，不能存在两条完全相同无法区别的记录。</li><li><code>域完整性</code>：范围</li><li><code>引用完整性</code>：例如员工所在部门，部门表就必须存在该部门</li><li><code>用户自定义完整性</code>：例如用户名密码不可为空</li></ul><blockquote><p>为什么需要约束？为了保证数据的完整性！</p></blockquote><blockquote><p>什么叫约束？对表中字段的限制。</p></blockquote><ul><li>列级约束：将此约束声明在对应字段的后面</li><li>表级约束：在表中所有字段都声明完，在所有字段的后面声明的约束</li></ul><blockquote><p>约束的分类：</p></blockquote><ul><li>NOT NULL非空约束</li><li>UNIQUE唯一性约束</li><li>PRIMARY KEY主键约束</li><li>FOREIGN KEY外键约束</li><li>CHECK检查约束</li><li>DEFAULT默认值约束</li></ul><blockquote><p>如何增加约束？</p></blockquote><blockquote><p>如何查看表中的约束？</p></blockquote><h2 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h2><p>建表时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#information_schema数据库名（系统库）<br>#table_constraints表名称（专门存储各个表的约束）<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.table_constraints<br><span class="hljs-keyword">WHERE</span> table_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;表名称&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>建表后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型 <span class="hljs-keyword">NULL</span>;#去掉<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>，相当于修改某个非注解字段，该字段允许为空<br>或<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型;#去掉<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>，相当于修改某个非注解字段，该字段允许为空<br></code></pre></td></tr></table></figure><h2 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">同一个表可以有多个唯一约束。<br>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。<br>唯一性约束允许列值为空。<br>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。<br>MySQL会给唯一约束的列上默认创建一个唯一索引。<br></code></pre></td></tr></table></figure><p>建表时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name(<br>字段名 数据类型,<br>字段名 数据类型 <span class="hljs-keyword">unique</span>,<br>    字段名 数据类型 <span class="hljs-keyword">unique</span> key,<br>    字段名 数据类型<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型,<br>字段名 数据类型,<br>字段名 数据类型,<br>    ## 表级约束<br>[<span class="hljs-keyword">constraint</span> 约束名] <span class="hljs-keyword">unique</span> key(字段名)<br>);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sid <span class="hljs-type">int</span>,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>tel <span class="hljs-type">char</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unique</span>,<br>cardid <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">unique</span> key<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span>(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>),<br>PASSWORD <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">16</span>),<br><span class="hljs-comment">-- 使用表级约束语法</span><br><span class="hljs-keyword">CONSTRAINT</span> uk_name_pwd <span class="hljs-keyword">UNIQUE</span>(NAME,PASSWORD)<br>);<br></code></pre></td></tr></table></figure><p>建表后指定唯一键约束:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的<br>#方式<span class="hljs-number">1</span>：<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> key(字段列表);<br></code></pre></td></tr></table></figure><h3 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h3><ul><li>添加唯一性约束的列上也会自动创建唯一索引。</li><li>删除唯一约束只能通过删除唯一索引的方式删除。</li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.table_constraints <br><span class="hljs-keyword">WHERE</span> table_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;表名&#x27;</span>; #查看都有哪些约束<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span><br><span class="hljs-keyword">DROP</span> INDEX uk_name_pwd;<br></code></pre></td></tr></table></figure><blockquote><p> 注意：可以通过 show index from 表名称; 查看表的索引</p></blockquote><p><img src="/assets/image-20230829165818704.png" alt="image-20230829165818704"></p><p><img src="/assets/image-20230829165929992.png" alt="image-20230829165929992"></p><p><img src="/assets/image-20230829165943087.png" alt="image-20230829165943087"></p><h2 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h2><p>作用：用来唯一标识表中的一行记录。</p><p>特点：主键约束相当于<strong>唯一约束+非空约束</strong>的组合，主键约束列不允许重复，也不允许出现空值。</p><ul><li>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</li><li>主键约束对应着表中的一列或者多列（复合主键）</li><li>MySQL的主键名总是PRIMARY，就算自己命名了主键约束名也没用。</li><li>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的主键索引（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</li><li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li></ul><p><img src="/assets/image-20230829171558637.png" alt="image-20230829171558637"></p><p>建表时</p><p>建立一个表的主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型 <span class="hljs-keyword">primary</span> key, #列级模式<br>字段名 数据类型,<br>字段名 数据类型<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型,<br>字段名 数据类型,<br>字段名 数据类型,<br>[<span class="hljs-keyword">constraint</span> 约束名] <span class="hljs-keyword">primary</span> key(字段名) #表级模式<br>);<br>#列级约束<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>);#成功<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>);#成功<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>);#失败 因为与第一行的id重复<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;李琦&#x27;</span>);#失败 因为id不能为<span class="hljs-keyword">null</span><br><br>#表级约束<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp5(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>pwd <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br><span class="hljs-keyword">CONSTRAINT</span> emp5_id_pk <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br></code></pre></td></tr></table></figure><p>建立两个表主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#演示一个表建立两个主键约束<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">primary</span> key<br>); #错误 一个表不能含有两个及以上的主键<br></code></pre></td></tr></table></figure><p>建表后增加主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (sid);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp5 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(NAME,pwd);<br></code></pre></td></tr></table></figure><p><strong><code>通常不删除索引操作</code></strong></p><h3 id="关于复合主键"><a href="#关于复合主键" class="headerlink" title="关于复合主键"></a>关于复合主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型,<br>字段名 数据类型,<br>字段名 数据类型,<br><span class="hljs-keyword">primary</span> key(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>) #表示字段<span class="hljs-number">1</span>和字段<span class="hljs-number">2</span>的组合是唯一的，也可以有更多个字段<br>);<br>#学生表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, #学号<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) #学生姓名<br>);<br>#课程表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course(<br>cid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, #课程编号<br>cname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) #课程名称<br>);<br>#选课表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student_course(<br>sid <span class="hljs-type">int</span>,<br>cid <span class="hljs-type">int</span>,<br>score <span class="hljs-type">int</span>,<br><span class="hljs-keyword">primary</span> key(sid,cid) #复合主键<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp6(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>pwd <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br><span class="hljs-keyword">CONSTRAINT</span> emp7_pk <span class="hljs-keyword">PRIMARY</span> KEY(NAME,pwd)<br>);<br></code></pre></td></tr></table></figure><h2 id="AUTO-INCREMENT自增长列"><a href="#AUTO-INCREMENT自增长列" class="headerlink" title="AUTO_INCREMENT自增长列"></a>AUTO_INCREMENT自增长列</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">（<span class="hljs-number">1</span>）一个表最多只能有一个自增长列<br>（<span class="hljs-number">2</span>）当需要产生唯一标识符或顺序值时，可设置自 增长<br>（<span class="hljs-number">3</span>）自增长列约束的列必须是键列（主键列，唯一键列）<br>（<span class="hljs-number">4</span>）自增约束的列的数据类型必须是整数类型<br>（<span class="hljs-number">5</span>）如果自增列指定了 <span class="hljs-number">0</span> 和 <span class="hljs-literal">null</span>，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接<br>赋值为具体值。<br></code></pre></td></tr></table></figure><p>错误演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee(<br>eid <span class="hljs-type">int</span> auto_increment,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>); #自增长约束的列必须是键列<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee(<br>eid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span> key auto_increment<br>); #自增约束的列的数据类型必须是整数类型<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型 <span class="hljs-keyword">primary</span> key auto_increment,<br>字段名 数据类型 <span class="hljs-keyword">unique</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>字段名 数据类型 <span class="hljs-keyword">unique</span> key,<br>字段名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> 默认值,<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型 <span class="hljs-keyword">default</span> 默认值 ,<br>字段名 数据类型 <span class="hljs-keyword">unique</span> key auto_increment,<br>字段名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> 默认值,,<br><span class="hljs-keyword">primary</span> key(字段名)<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee(<br>eid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>建表后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型 auto_increment;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> employee <br>modify eid <span class="hljs-type">int</span> auto_increment;<br></code></pre></td></tr></table></figure><p>删除自增约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型;<br>#去掉auto_increment相当于删除<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> employee modify eid <span class="hljs-type">int</span>; #把auto_increment去掉<br></code></pre></td></tr></table></figure><h3 id="MySQL-8-0新特性—自增变量的持久化"><a href="#MySQL-8-0新特性—自增变量的持久化" class="headerlink" title="MySQL 8.0新特性—自增变量的持久化"></a>MySQL 8.0新特性—自增变量的持久化</h3><blockquote><p>在mysql5（内存维护）中自增长删除行后会延续删除行的增量，需要重启服务，才会延续最后一行的增量</p><p>而mysql8（重做日志）中删除一行不会延续删除行的增量，重启服务后也会记录之前删除行的增量</p></blockquote><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><ul><li>作用：限定某个表的某个字段的引用</li></ul><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs SQL">#外键约束<br><span class="hljs-comment">-- 先创建主表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> DEPT1(<br>DEPT_ID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>DEPT_NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>)<br>);<br><br>#再创建从表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> EMP1(<br>EMP_ID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>EMP_NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br>DEPAMENT_ID <span class="hljs-type">INT</span>,<br><span class="hljs-keyword">CONSTRAINT</span> FK_EMP1_DEPT_ID <span class="hljs-keyword">FOREIGN</span> KEY(DEPAMENT_ID) <span class="hljs-keyword">REFERENCES</span> DEPT1(DEPT_ID)<br>);<br><br>## 效果如下<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT1 <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;DS&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP1 <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;SD&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="CHECK约束-MYSQL8"><a href="#CHECK约束-MYSQL8" class="headerlink" title="CHECK约束(MYSQL8+)"></a>CHECK约束(MYSQL8+)</h2><p><img src="/assets/image-20230829204520064.png" alt="image-20230829204520064"></p><h2 id="DEFAULT约束"><a href="#DEFAULT约束" class="headerlink" title="DEFAULT约束"></a>DEFAULT约束</h2><p>默认赋值</p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>事务</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/16_%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/16_%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>事务是一种机制，一个操作序列，包含了一组数据库操作命令。</li><li>事务把所有命令作为一个整体一起向系统提交或撤销操作请求，即这组数据库命令要么同时成功，要么同时失败</li><li>事务是不可分割的工作逻辑单元</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">START</span> TRANSACTION;<br>或者 <span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">ROLLBACK</span>;<br><br><br>提交事务之前开启事务，就会备份一次事务，事务提交之前所执行的操作一旦回滚，则会回到开启事务之前的状态，事务提交后则开启事务之前的状态消失，无法回滚。<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230830195142681.png" alt="image-20230830195142681"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 事务开启</span><br><span class="hljs-keyword">BEGIN</span>;## 或者<span class="hljs-keyword">START</span> TRANSACTION<br><span class="hljs-comment">-- 2.MRA金额-500</span><br><span class="hljs-keyword">UPDATE</span> ACCOUNT <span class="hljs-keyword">SET</span> MONEY <span class="hljs-operator">=</span> MONEY <span class="hljs-operator">-</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MRA&#x27;</span>;<br><span class="hljs-comment">-- 3.MRB金额+500</span><br><span class="hljs-keyword">UPDATE</span> ACCOUNT <span class="hljs-keyword">SET</span> MONEY <span class="hljs-operator">=</span> MONEY <span class="hljs-operator">+</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MRB&#x27;</span>;<br><span class="hljs-keyword">COMMIT</span>; <br><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></td></tr></table></figure><h2 id="事务的四大特征"><a href="#事务的四大特征" class="headerlink" title="事务的四大特征"></a>事务的四大特征</h2><ul><li>原子性(Atomicity):事务是不可分割的最小操作单位，要么同时成功，要么同时失败</li><li>一致性(Consistency):事务完成时，必须使所有的数据都保持一致状态</li><li>隔离性(Isolation):多个事务之间，操作的可见性</li><li>持久性(Durability）:事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><p>mysql是默认自动提交，而ORACLE默认手动提交</p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库概述</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/1_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/1_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><p><strong>1.为什么使用数据库</strong></p><ul><li>持久化：将数据保存到可掉电式存储设备中，在硬盘中“固化”数据</li><li>持久化的主要作用：将内存中的数据存储在关系型数据库中</li></ul><p><img src="/assets/image-20230820175721499.png" alt="image-20230820175721499"></p><p><strong>2.数据库与数据库管理系统</strong></p><p><strong>相关概念</strong></p><ul><li>DB:database <strong>数据库</strong>。即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</li><li>DBMS:<strong>数据库管理系统</strong>。是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库中表内的数据。</li><li>SQL:<strong>结构化查询语言</strong>。用来与数据库通信的语言。</li></ul><p><strong>二者关系</strong></p><p>数据库管理系统(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。</p><p><strong>常见DBMS</strong></p><ul><li>MYSQL</li><li>ORACLE</li><li>SQLSERVER</li></ul><p><strong>3.MYSQL介绍</strong></p><p><strong>概述</strong></p><p>MYSQL是一个<strong>开放源代码的关系型数据库管理系统</strong></p><p><strong>版本由5.7—-&gt;8.0</strong></p><p><strong>ORACLE与<strong><strong>MYSQL</strong></strong>的选择</strong></p><p>Oracle更适合大型跨国企业的使用，对性能要求以及安全性有更高的要求。</p><p>MySQL由于其体积小、速度快、总体拥有成本低，可处理上干万条记录的大型数据库，尤其是开放源码这一特点，使得很多互联网公司、中小型网站选择了MySQL作为网站数据库(Facebook,Twitter,YouTube,阿里巴巴&#x2F;蚂蚁金服，去哪儿，美团外卖，腾讯)。</p><p><strong>4.RDBMS与非RDMBS</strong></p><p>使用最多的是RDBMS关系型数据库</p><p><strong>RDBMS</strong></p><p>实质：最古老的数据库类型，<strong>二元关系</strong></p><ul><li>关系型数据库以行列存储数据，这一行列系列组成表TABLE，一组表组成库DATABASE</li><li>表与表之间的数据记录存在关系，关系型数据库就是建立在关系模型基础上的数据库</li><li>SQL是查询语言</li></ul><p>优势</p><ul><li>复杂查询</li><li>事务支持</li></ul><p><strong>非RDBMS(NoSQL)</strong></p><p>实质：RDBMS的阉割版，基于键值对存储数据，性能贼高。通过减少不常用的功能进一步提高性能。</p><p><strong>键值型数据库（如Redis）</strong></p><p><strong>文档型数据库（如MongoDB）…</strong></p><p>NoSQL对SQL做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据库功能非关系型数据库的功能就足够使用了。这种情况下，使用性能更高、成本更低的非关系型数据库当然是更明智的选择。比如：日志收集、排行榜、定时器等。</p><p><strong>5.RDBMS设计规则</strong></p><ul><li>关系型数据库的典型数据结构就是数据表，这些数据表的组成都是结构化的(Structured)。</li><li>将数据放到表中，表再放到库中。</li><li>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中“类”的设计。</li></ul><p><strong>表，记录，字段</strong></p><ul><li>ER模型（entity-relationship，实体-联系）三个主要概念：实体集，属性，联系集</li><li>一个实体集(class)对应于数据库中的一个表(table),一个实体(instance)则对应于数据库表中的一行(row),也称为一条记录(record)。一个属性(attribute)对应于数据库表中的一列(column),也称为一个字段(field)。</li></ul><p>ORM思想 表—java的类 表的数据—类的对象 表的列—类的属性</p><p><strong>表的关联关系</strong></p><p>存在四种</p><ol><li>一对一关联</li><li>一对多关联</li><li>多对多关联</li><li>自我引用</li></ol><p><strong>一对一 one to one</strong></p><p>举例：学生表（学号、姓名、手机号码、班级、系别、身份证号码、家庭住籍贯、紧急联系人…）</p><ul><li><p>拆为两个表</p></li><li><ul><li>基础信息表：学号、姓名、手机号码、班级、系别</li><li>档案信息表：身份证号码、家庭住籍贯、紧急联系人…</li></ul></li><li><p>建表原则</p></li><li><ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul></li></ul><p><strong>一对多 one to many</strong></p><p>举例：客户表和订单表，分类表和商品表，部门表和员工表</p><p><strong>多对多 many to many</strong></p><p>创建第三表，即联接表，将多对多划分为两个一对多关系。</p><ul><li>学生信息表：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别…）</li><li>课程信息表：一行代表一个课程的信息（课程编号、授课老师、简介…）</li><li>选课信息表：一个学生可以选多门课，一门课可以被多个学生选择</li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><img src="/assets/image-20230820190615531.png" alt="image-20230820190615531"></p><p><img src="/assets/image-20230820190652783.png" alt="image-20230820190652783"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>运算符</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/4_%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/4_%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><img src="/assets/image-20230821145325487.png" alt="image-20230821145325487"></p><p>特殊举例</p><p><img src="/assets/image-20230821145521055.png" alt="image-20230821145521055"></p><p>此时字符串转换为数值，隐式转换</p><p><img src="/assets/image-20230821145656911.png" alt="image-20230821145656911"></p><p>‘s’当作0处理</p><p><img src="/assets/image-20230821145801342.png" alt="image-20230821145801342"></p><p>null与任何值运算结果都为null</p><p><img src="/assets/image-20230821145923033.png" alt="image-20230821145923033"></p><p>运算错误，输出null</p><p><img src="/assets/image-20230821150012310.png" alt="image-20230821150012310"></p><p>除法运算结果为浮点型数值</p><p><img src="/assets/image-20230821150344770.png" alt="image-20230821150344770"></p><p>结果正负取决于被除数的正负</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0,其他情况则返回NULL。</p><p><img src="/assets/image-20230821150648725.png" alt="image-20230821150648725"></p><h3 id><a href="#" class="headerlink" title="&#x3D;"></a>&#x3D;</h3><p><img src="/assets/image-20230821150955048.png" alt="image-20230821150955048"></p><p>字符与数值的比较，字符隐式转换为0</p><p><img src="/assets/image-20230821151049711.png" alt="image-20230821151049711"></p><p>字符串的比较是根据ascii比较</p><p><img src="/assets/image-20230821151249968.png" alt="image-20230821151249968"></p><p><strong>null与任何值比较均为null</strong></p><p><img src="/assets/image-20230821151546184.png" alt="image-20230821151546184"></p><p>结果原因是where后面的条件语句不会返回0或1而是null不满足过滤</p><h3 id="-1"><a href="#-1" class="headerlink" title="&lt;&#x3D;&gt;"></a>&lt;&#x3D;&gt;</h3><p>&lt;&#x3D;&gt;安全等于号，（为null）特征是可以与null进行比较</p><p><img src="/assets/image-20230821152226108.png" alt="image-20230821152226108"></p><p><img src="/assets/image-20230821152709325.png" alt="image-20230821152709325"></p><h3 id="-2"><a href="#-2" class="headerlink" title="&lt;&gt;"></a>&lt;&gt;</h3><p>与!&#x3D;等价，并非&lt;&#x3D;&gt;的对立，容易误解</p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p><img src="/assets/image-20230821153218957.png" alt="image-20230821153218957"></p><h4 id="IS-NULL-IS-NOT-NULL-ISNULL"><a href="#IS-NULL-IS-NOT-NULL-ISNULL" class="headerlink" title="IS NULL\IS NOT NULL\ISNULL()"></a>IS NULL\IS NOT NULL\ISNULL()</h4><p><img src="/assets/image-20230821153332600.png" alt="image-20230821153332600"></p><p><img src="/assets/image-20230821155142906.png" alt="image-20230821155142906"></p><h4 id="LEAST-GREATEST"><a href="#LEAST-GREATEST" class="headerlink" title="LEAST()&#x2F;GREATEST()"></a>LEAST()&#x2F;GREATEST()</h4><p><img src="/assets/image-20230821155417375.png" alt="image-20230821155417375"></p><h4 id="NOT-BETWEEN-…-AND-…"><a href="#NOT-BETWEEN-…-AND-…" class="headerlink" title="(NOT) BETWEEN … AND …"></a>(NOT) BETWEEN … AND …</h4><p>BETWEEN A AND B取值范围[A,B]</p><h4 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="(NOT) IN()"></a>(NOT) IN()</h4><p>A (NOT) IN(A,B,C,D,E);</p><h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><p>%代表不确定个数的字符</p><p>_代表确定1个单位的字符</p><p><img src="/assets/image-20230821160101265.png" alt="image-20230821160101265"></p><p><img src="/assets/image-20230821160115890.png" alt="image-20230821160115890"></p><p><img src="/assets/image-20230821160132407.png" alt="image-20230821160132407"></p><p>查询first name中包含字符’a’且包含字符’e’的员工信息</p><p><img src="/assets/image-20230821160444178.png" alt="image-20230821160444178"></p><p><img src="/assets/image-20230821160651147.png" alt="image-20230821160651147"></p><p>查询第2个字符是’a’的员工信息</p><p><img src="/assets/image-20230821160900273.png" alt="image-20230821160900273"></p><p>查询第2个字符是_且第3个字符是’a’的员工信息</p><p>需要转义字符\</p><p><img src="/assets/image-20230821162107382.png"></p><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_$_a%&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;$&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="REGEXP-RLIKE"><a href="#REGEXP-RLIKE" class="headerlink" title="REGEXP&#x2F;RLIKE"></a>REGEXP&#x2F;RLIKE</h4><p>正则表达式</p><p><img src="/assets/image-20230821162646926.png" alt="image-20230821162646926"></p><p><img src="/assets/image-20230821162819840.png" alt="image-20230821162819840"></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="/assets/image-20230821162936055.png" alt="image-20230821162936055"></p><p>XOR逻辑异或，追求的是异</p><p><img src="/assets/image-20230821164908665.png" alt="image-20230821164908665"></p><p><img src="/assets/image-20230821164941183.png" alt="image-20230821164941183"></p><p><img src="/assets/image-20230821164957902.png" alt="image-20230821164957902"></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><img src="/assets/image-20230821165340165.png" alt="image-20230821165340165"></p><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p><img src="/assets/image-20230821165509820.png" alt="image-20230821165509820"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>卸载</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/2_%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/2_%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><ol><li><ol><li></li></ol><p>cmd 查询当前版本 &#x2F;&#x2F;mysql –version</p></li><li><ol start="2"><li></li></ol><p>登录mysql &#x2F;&#x2F;mysql -u root -p </p></li><li><ol start="3"><li></li></ol><p>文件资源管理器中找到Mysql server</p></li></ol><p>卸载：</p><ol><li><ol><li></li></ol><p>关闭mysql服务</p></li><li><ol start="2"><li></li></ol><p>卸载包卸载或控制面板卸载</p></li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>链接：<a href="https://share.weiyun.com/yd7OxoMm">https://share.weiyun.com/yd7OxoMm</a> 密码：cg4mvb</p><p><a href="https://dev.mysql.com/downloads/mysql/">MySQL :: Download MySQL Community Server</a></p><p>建议安装msi</p><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><h2 id="服务的启动与停止"><a href="#服务的启动与停止" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h2><p>MySQL安装完毕之后，需要启动服务器进程，不然客户端无法连接数据库。在前面的配置过程中，已经将MySQL安装为Windows服务，并且勾选当Windows启动、停止时，MySQL也自动启动、停止。</p><p>手动启动指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">net start Mysql服务器名称<br>net stop Mysql<br></code></pre></td></tr></table></figure><h2 id="登录-1"><a href="#登录-1" class="headerlink" title="登录"></a>登录</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">常规登录<br>mysql -u(username) root -p(password) 123456(建议不在此写) <br>如果需要另外版本的mysql服务需要补充端口号<br>mysql -u(username) root -P(POST) 3307 -p(password)<br>连接其他ip的mysql<br>mysql -u(username) root -P(POST) 3307 -h(host) 192.168.1.12 -p(password)<br></code></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">show databases;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820183809331.png" alt="image-20230820183809331"></p><p>创建数据库</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">create database dbtest;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820183957168.png" alt="image-20230820183957168"></p><p>使用数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">use dbtest<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184148149.png" alt="image-20230820184148149"></p><p>创建表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employees(id <span class="hljs-type">int</span>,<span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>));<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184254114.png" alt="image-20230820184254114"></p><p>添加数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees <span class="hljs-keyword">values</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;TOM&quot;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees <span class="hljs-keyword">values</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;JOY&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184409967.png" alt="image-20230820184409967"></p><p>查询所有数据</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employees;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184540026.png" alt="image-20230820184540026"></p><p>添加中文数据（8.0+支持中文）</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees <span class="hljs-keyword">values</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&quot;汉拨尼&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184739147.png" alt="image-20230820184739147"></p><p>（原因是支持utf-8字符集）</p><p><img src="/assets/image-20230820184851849.png" alt="image-20230820184851849"></p><h2 id="Navicate图形化界面"><a href="#Navicate图形化界面" class="headerlink" title="Navicate图形化界面"></a>Navicate图形化界面</h2><p>太简单不说了</p><p><img src="/assets/image-20230820185529223.png" alt="image-20230820185529223"></p><p><img src="/assets/image-20230820185650030.png" alt="image-20230820185650030"></p><h1 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h1><p><img src="/assets/image-20230820185925330.png" alt="image-20230820185925330"></p><p><img src="/assets/image-20230820185840481.png" alt="image-20230820185840481"></p><p>MYSQL主要的开发语言是<strong>C++</strong></p><h1 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h1><p>1:通过任务管理器或者服务管理，关掉mysqld(服务进程)<br>2:通过命令行+特殊参数开启mysqld<br>mysqld–defaults-file&#x3D;”D:\ProgramFiles\mysql\MySQLServer5.7Data\my.ini–skip-grant-tables<br>3:此时，mysqld服务进程已经打开。并且不需要权限检查<br>4:mysql-uroot无密码登陆服务器。另启动一个客户端进行<br>5:修改权限表<br>(1)use mysql;<br>(2)update user set authentication_string&#x3D;password(‘newpassword’) where user&#x3D;’root’and Host&#x3D;’localhost’;<br>(3)flush privileges;<br>6:通过任务管理器，关掉mysqld服务进程。<br>7:再次通过服务管理，打开mysql服务。<br>8:即可用修改后的新密码登陆。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><img src="/assets/image-20230820190754564.png" alt="image-20230820190754564"></p><p><img src="/assets/image-20230820190839636.png" alt="image-20230820190839636"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL背景</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/select/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/select/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL背景"><a href="#SQL背景" class="headerlink" title="SQL背景"></a>SQL背景</h1><ul><li>半衰期长</li><li>与数据打交道</li></ul><p><img src="/assets/image-20230820194652718.png" alt="image-20230820194652718"></p><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><ol><li>DDL数据定义语言 create \ alter \ drop \ rename \ truncate (data definition languages)</li><li>DML数据操作语言 insert \ delete \ update \ select  (data manipulation languages)</li><li>DCL数据控制语言 commit \ rollback \ savepoint \ grant \ revoke (data control languages)</li><li>DQL 数据查询语言 select （data query languages）</li><li>TCL 事务控制语言 commit \ rollback (transaction control language)</li></ol><h1 id="SQL规则与规范"><a href="#SQL规则与规范" class="headerlink" title="SQL规则与规范"></a>SQL规则与规范</h1><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul><li><p>SQL可一行或者多行</p></li><li><p>每一段语句必须加分号<code>;</code>或者<code>\G</code> <code>\g</code></p></li><li><p>字符串型和日期时间类型的数据可以使用单引号(‘)表示</p></li></ul><h3 id="大小写规范问题"><a href="#大小写规范问题" class="headerlink" title="大小写规范问题"></a>大小写规范问题</h3><ul><li>windows大小写不敏感，但是Linux敏感</li><li>推荐采用统一的书写规范<ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL关键字、函数名、绑定变量等都大写</li></ul></li></ul><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含A-Z,a-Z,0-9,_共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MYSQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证字段没有私保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用、（着重<br>号)引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据类型在一<br>个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h1 id="导入数据表的数据方式"><a href="#导入数据表的数据方式" class="headerlink" title="导入数据表的数据方式"></a>导入数据表的数据方式</h1><ul><li>source sql文件的全路径名 需要在cmd命令行操作</li><li>基于具体的图形化界面的工具导入数据</li></ul><p> <a href="%22db/atguigudb.sql%22">atguigudb.sql</a> </p><h1 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> (?) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">table</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span>; <br><span class="hljs-keyword">select</span> <span class="hljs-number">2</span> <span class="hljs-keyword">from</span> dual; dual是伪表<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821121715577.png" alt="image-20230821121715577"></p><h2 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h2><p>关键字<strong>as</strong>，alias</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">as</span> emp_id <span class="hljs-keyword">from</span> tablename;<br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">as</span> &quot;emp_id&quot; <span class="hljs-keyword">from</span> tablename;<br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">as</span> &quot;employee id&quot; <span class="hljs-keyword">from</span> tablename;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821124355769.png" alt="image-20230821124355769"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id idas <span class="hljs-keyword">from</span> tablename;<br><span class="hljs-keyword">select</span> id &quot;idas&quot; <span class="hljs-keyword">from</span> tablename;<br><span class="hljs-keyword">select</span> id &quot;employee id&quot; <span class="hljs-keyword">from</span> tablename; # 必须加双引号的情况<br></code></pre></td></tr></table></figure><p>规范：<strong>列的别名可以用双引号就不用单引号</strong></p><p><img src="/assets/image-20230821124213876.png" alt="image-20230821124213876"></p><h2 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h2><p><strong>distinct</strong> 关键字去重</p><p>查询员工表中一共有哪些部门id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821130252505.png" alt="image-20230821130252505"></p><p><img src="/assets/image-20230821130717437.png" alt="image-20230821130717437"></p><p><img src="/assets/image-20230821131023650.png" alt="image-20230821131023650"></p><h2 id="空值参与运算"><a href="#空值参与运算" class="headerlink" title="空值参与运算"></a>空值参与运算</h2><p>null不等同于0和‘’ ，‘null’ </p><p><img src="/assets/image-20230821135529313.png" alt="image-20230821135529313"></p><p>空值参与运算结果也是空值</p><p><img src="/assets/image-20230821135717996.png" alt="image-20230821135717996"></p><h2 id="着重号"><a href="#着重号" class="headerlink" title="着重号 &#96;&#96;"></a>着重号 &#96;&#96;</h2><p><img src="/assets/image-20230821140029068.png" alt="image-20230821140029068"></p><p>关键字冲突需要’order’</p><p><img src="/assets/image-20230821140128309.png" alt="image-20230821140128309"></p><h2 id="查询常数"><a href="#查询常数" class="headerlink" title="查询常数"></a>查询常数</h2><p><img src="/assets/image-20230821140422445.png" alt="image-20230821140422445"></p><h2 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h2><p>关键字<code>DESCRIBE</code> <code>DESC</code></p><p>显示表中字段的详细信息</p><p><img src="/assets/image-20230821140602617.png" alt="image-20230821140602617"></p><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><p>关键字 <code>WHERE</code></p><p><img src="/assets/image-20230821142946351.png" alt="image-20230821142946351"></p><p><img src="/assets/image-20230821143103480.png" alt="image-20230821143103480"></p><p>atguigudb</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">SQLyog Ultimate v12.08 (64 bit)</span><br><span class="hljs-comment">MySQL - 5.7.28-log : Database - atguigudb</span><br><span class="hljs-comment">*********************************************************************</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*!40101 SET NAMES utf8 */</span>;<br><br><span class="hljs-comment">/*!40101 SET SQL_MODE=&#x27;&#x27;*/</span>;<br><br><span class="hljs-comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;<br><span class="hljs-comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;<br><span class="hljs-comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;<br><span class="hljs-comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;<br><span class="hljs-keyword">CREATE</span> DATABASE <span class="hljs-comment">/*!32312 IF NOT EXISTS*/</span>`atguigudb` <span class="hljs-comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;<br><br>USE `atguigudb`;<br><br><span class="hljs-comment">/*Table structure for table `countries` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `countries`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `countries` (<br>  `country_id` <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `country_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `region_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`country_id`),<br>  KEY `countr_reg_fk` (`region_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `countr_reg_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`region_id`) <span class="hljs-keyword">REFERENCES</span> `regions` (`region_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `countries` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `countries`(`country_id`,`country_name`,`region_id`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;AR&#x27;</span>,<span class="hljs-string">&#x27;Argentina&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;AU&#x27;</span>,<span class="hljs-string">&#x27;Australia&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;BE&#x27;</span>,<span class="hljs-string">&#x27;Belgium&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;BR&#x27;</span>,<span class="hljs-string">&#x27;Brazil&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;CA&#x27;</span>,<span class="hljs-string">&#x27;Canada&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;CH&#x27;</span>,<span class="hljs-string">&#x27;Switzerland&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;CN&#x27;</span>,<span class="hljs-string">&#x27;China&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;DE&#x27;</span>,<span class="hljs-string">&#x27;Germany&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;DK&#x27;</span>,<span class="hljs-string">&#x27;Denmark&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;EG&#x27;</span>,<span class="hljs-string">&#x27;Egypt&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;FR&#x27;</span>,<span class="hljs-string">&#x27;France&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;HK&#x27;</span>,<span class="hljs-string">&#x27;HongKong&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;Israel&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;India&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;IT&#x27;</span>,<span class="hljs-string">&#x27;Italy&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;JP&#x27;</span>,<span class="hljs-string">&#x27;Japan&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;KW&#x27;</span>,<span class="hljs-string">&#x27;Kuwait&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;MX&#x27;</span>,<span class="hljs-string">&#x27;Mexico&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;NG&#x27;</span>,<span class="hljs-string">&#x27;Nigeria&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;NL&#x27;</span>,<span class="hljs-string">&#x27;Netherlands&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;SG&#x27;</span>,<span class="hljs-string">&#x27;Singapore&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;UK&#x27;</span>,<span class="hljs-string">&#x27;United Kingdom&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;US&#x27;</span>,<span class="hljs-string">&#x27;United States of America&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;ZM&#x27;</span>,<span class="hljs-string">&#x27;Zambia&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;ZW&#x27;</span>,<span class="hljs-string">&#x27;Zimbabwe&#x27;</span>,<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">/*Table structure for table `departments` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `departments`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `departments` (<br>  `department_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `department_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `manager_id` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `location_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`department_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `dept_id_pk` (`department_id`),<br>  KEY `dept_loc_fk` (`location_id`),<br>  KEY `dept_mgr_fk` (`manager_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `dept_loc_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`location_id`) <span class="hljs-keyword">REFERENCES</span> `locations` (`location_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `dept_mgr_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`manager_id`) <span class="hljs-keyword">REFERENCES</span> `employees` (`employee_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `departments` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `departments`(`department_id`,`department_name`,`manager_id`,`location_id`) <span class="hljs-keyword">values</span> (<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;Administration&#x27;</span>,<span class="hljs-number">200</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;Marketing&#x27;</span>,<span class="hljs-number">201</span>,<span class="hljs-number">1800</span>),(<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;Purchasing&#x27;</span>,<span class="hljs-number">114</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;Human Resources&#x27;</span>,<span class="hljs-number">203</span>,<span class="hljs-number">2400</span>),(<span class="hljs-number">50</span>,<span class="hljs-string">&#x27;Shipping&#x27;</span>,<span class="hljs-number">121</span>,<span class="hljs-number">1500</span>),(<span class="hljs-number">60</span>,<span class="hljs-string">&#x27;IT&#x27;</span>,<span class="hljs-number">103</span>,<span class="hljs-number">1400</span>),(<span class="hljs-number">70</span>,<span class="hljs-string">&#x27;Public Relations&#x27;</span>,<span class="hljs-number">204</span>,<span class="hljs-number">2700</span>),(<span class="hljs-number">80</span>,<span class="hljs-string">&#x27;Sales&#x27;</span>,<span class="hljs-number">145</span>,<span class="hljs-number">2500</span>),(<span class="hljs-number">90</span>,<span class="hljs-string">&#x27;Executive&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;Finance&#x27;</span>,<span class="hljs-number">108</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">110</span>,<span class="hljs-string">&#x27;Accounting&#x27;</span>,<span class="hljs-number">205</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">120</span>,<span class="hljs-string">&#x27;Treasury&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">130</span>,<span class="hljs-string">&#x27;Corporate Tax&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">140</span>,<span class="hljs-string">&#x27;Control And Credit&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">150</span>,<span class="hljs-string">&#x27;Shareholder Services&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">160</span>,<span class="hljs-string">&#x27;Benefits&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">170</span>,<span class="hljs-string">&#x27;Manufacturing&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">180</span>,<span class="hljs-string">&#x27;Construction&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">190</span>,<span class="hljs-string">&#x27;Contracting&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;Operations&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">210</span>,<span class="hljs-string">&#x27;IT Support&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">220</span>,<span class="hljs-string">&#x27;NOC&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">230</span>,<span class="hljs-string">&#x27;IT Helpdesk&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">240</span>,<span class="hljs-string">&#x27;Government Sales&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">250</span>,<span class="hljs-string">&#x27;Retail Sales&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">260</span>,<span class="hljs-string">&#x27;Recruiting&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">270</span>,<span class="hljs-string">&#x27;Payroll&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>);<br><br><span class="hljs-comment">/*Table structure for table `employees` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `employees`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `employees` (<br>  `employee_id` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `first_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `last_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `phone_number` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `hire_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `job_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `salary` <span class="hljs-keyword">double</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `commission_pct` <span class="hljs-keyword">double</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `manager_id` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `department_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`employee_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `emp_email_uk` (`email`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `emp_emp_id_pk` (`employee_id`),<br>  KEY `emp_dept_fk` (`department_id`),<br>  KEY `emp_job_fk` (`job_id`),<br>  KEY `emp_manager_fk` (`manager_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `emp_dept_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`department_id`) <span class="hljs-keyword">REFERENCES</span> `departments` (`department_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `emp_job_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`job_id`) <span class="hljs-keyword">REFERENCES</span> `jobs` (`job_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `emp_manager_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`manager_id`) <span class="hljs-keyword">REFERENCES</span> `employees` (`employee_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `employees` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `employees`(`employee_id`,`first_name`,`last_name`,`email`,`phone_number`,`hire_date`,`job_id`,`salary`,`commission_pct`,`manager_id`,`department_id`) <span class="hljs-keyword">values</span> (<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;Steven&#x27;</span>,<span class="hljs-string">&#x27;King&#x27;</span>,<span class="hljs-string">&#x27;SKING&#x27;</span>,<span class="hljs-string">&#x27;515.123.4567&#x27;</span>,<span class="hljs-string">&#x27;1987-06-17&#x27;</span>,<span class="hljs-string">&#x27;AD_PRES&#x27;</span>,<span class="hljs-number">24000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;Neena&#x27;</span>,<span class="hljs-string">&#x27;Kochhar&#x27;</span>,<span class="hljs-string">&#x27;NKOCHHAR&#x27;</span>,<span class="hljs-string">&#x27;515.123.4568&#x27;</span>,<span class="hljs-string">&#x27;1989-09-21&#x27;</span>,<span class="hljs-string">&#x27;AD_VP&#x27;</span>,<span class="hljs-number">17000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">102</span>,<span class="hljs-string">&#x27;Lex&#x27;</span>,<span class="hljs-string">&#x27;De Haan&#x27;</span>,<span class="hljs-string">&#x27;LDEHAAN&#x27;</span>,<span class="hljs-string">&#x27;515.123.4569&#x27;</span>,<span class="hljs-string">&#x27;1993-01-13&#x27;</span>,<span class="hljs-string">&#x27;AD_VP&#x27;</span>,<span class="hljs-number">17000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">103</span>,<span class="hljs-string">&#x27;Alexander&#x27;</span>,<span class="hljs-string">&#x27;Hunold&#x27;</span>,<span class="hljs-string">&#x27;AHUNOLD&#x27;</span>,<span class="hljs-string">&#x27;590.423.4567&#x27;</span>,<span class="hljs-string">&#x27;1990-01-03&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">9000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">102</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">104</span>,<span class="hljs-string">&#x27;Bruce&#x27;</span>,<span class="hljs-string">&#x27;Ernst&#x27;</span>,<span class="hljs-string">&#x27;BERNST&#x27;</span>,<span class="hljs-string">&#x27;590.423.4568&#x27;</span>,<span class="hljs-string">&#x27;1991-05-21&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">6000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">103</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">105</span>,<span class="hljs-string">&#x27;David&#x27;</span>,<span class="hljs-string">&#x27;Austin&#x27;</span>,<span class="hljs-string">&#x27;DAUSTIN&#x27;</span>,<span class="hljs-string">&#x27;590.423.4569&#x27;</span>,<span class="hljs-string">&#x27;1997-06-25&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">4800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">103</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">106</span>,<span class="hljs-string">&#x27;Valli&#x27;</span>,<span class="hljs-string">&#x27;Pataballa&#x27;</span>,<span class="hljs-string">&#x27;VPATABAL&#x27;</span>,<span class="hljs-string">&#x27;590.423.4560&#x27;</span>,<span class="hljs-string">&#x27;1998-02-05&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">4800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">103</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">107</span>,<span class="hljs-string">&#x27;Diana&#x27;</span>,<span class="hljs-string">&#x27;Lorentz&#x27;</span>,<span class="hljs-string">&#x27;DLORENTZ&#x27;</span>,<span class="hljs-string">&#x27;590.423.5567&#x27;</span>,<span class="hljs-string">&#x27;1999-02-07&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">4200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">103</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">108</span>,<span class="hljs-string">&#x27;Nancy&#x27;</span>,<span class="hljs-string">&#x27;Greenberg&#x27;</span>,<span class="hljs-string">&#x27;NGREENBE&#x27;</span>,<span class="hljs-string">&#x27;515.124.4569&#x27;</span>,<span class="hljs-string">&#x27;1994-08-17&#x27;</span>,<span class="hljs-string">&#x27;FI_MGR&#x27;</span>,<span class="hljs-number">12000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">109</span>,<span class="hljs-string">&#x27;Daniel&#x27;</span>,<span class="hljs-string">&#x27;Faviet&#x27;</span>,<span class="hljs-string">&#x27;DFAVIET&#x27;</span>,<span class="hljs-string">&#x27;515.124.4169&#x27;</span>,<span class="hljs-string">&#x27;1994-08-16&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">9000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">110</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;Chen&#x27;</span>,<span class="hljs-string">&#x27;JCHEN&#x27;</span>,<span class="hljs-string">&#x27;515.124.4269&#x27;</span>,<span class="hljs-string">&#x27;1997-09-28&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">8200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">111</span>,<span class="hljs-string">&#x27;Ismael&#x27;</span>,<span class="hljs-string">&#x27;Sciarra&#x27;</span>,<span class="hljs-string">&#x27;ISCIARRA&#x27;</span>,<span class="hljs-string">&#x27;515.124.4369&#x27;</span>,<span class="hljs-string">&#x27;1997-09-30&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">7700.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">112</span>,<span class="hljs-string">&#x27;Jose Manuel&#x27;</span>,<span class="hljs-string">&#x27;Urman&#x27;</span>,<span class="hljs-string">&#x27;JMURMAN&#x27;</span>,<span class="hljs-string">&#x27;515.124.4469&#x27;</span>,<span class="hljs-string">&#x27;1998-03-07&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">7800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">113</span>,<span class="hljs-string">&#x27;Luis&#x27;</span>,<span class="hljs-string">&#x27;Popp&#x27;</span>,<span class="hljs-string">&#x27;LPOPP&#x27;</span>,<span class="hljs-string">&#x27;515.124.4567&#x27;</span>,<span class="hljs-string">&#x27;1999-12-07&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">6900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">114</span>,<span class="hljs-string">&#x27;Den&#x27;</span>,<span class="hljs-string">&#x27;Raphaely&#x27;</span>,<span class="hljs-string">&#x27;DRAPHEAL&#x27;</span>,<span class="hljs-string">&#x27;515.127.4561&#x27;</span>,<span class="hljs-string">&#x27;1994-12-07&#x27;</span>,<span class="hljs-string">&#x27;PU_MAN&#x27;</span>,<span class="hljs-number">11000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">115</span>,<span class="hljs-string">&#x27;Alexander&#x27;</span>,<span class="hljs-string">&#x27;Khoo&#x27;</span>,<span class="hljs-string">&#x27;AKHOO&#x27;</span>,<span class="hljs-string">&#x27;515.127.4562&#x27;</span>,<span class="hljs-string">&#x27;1995-05-18&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">3100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">116</span>,<span class="hljs-string">&#x27;Shelli&#x27;</span>,<span class="hljs-string">&#x27;Baida&#x27;</span>,<span class="hljs-string">&#x27;SBAIDA&#x27;</span>,<span class="hljs-string">&#x27;515.127.4563&#x27;</span>,<span class="hljs-string">&#x27;1997-12-24&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">2900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">117</span>,<span class="hljs-string">&#x27;Sigal&#x27;</span>,<span class="hljs-string">&#x27;Tobias&#x27;</span>,<span class="hljs-string">&#x27;STOBIAS&#x27;</span>,<span class="hljs-string">&#x27;515.127.4564&#x27;</span>,<span class="hljs-string">&#x27;1997-07-24&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">2800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">118</span>,<span class="hljs-string">&#x27;Guy&#x27;</span>,<span class="hljs-string">&#x27;Himuro&#x27;</span>,<span class="hljs-string">&#x27;GHIMURO&#x27;</span>,<span class="hljs-string">&#x27;515.127.4565&#x27;</span>,<span class="hljs-string">&#x27;1998-11-15&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">2600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">119</span>,<span class="hljs-string">&#x27;Karen&#x27;</span>,<span class="hljs-string">&#x27;Colmenares&#x27;</span>,<span class="hljs-string">&#x27;KCOLMENA&#x27;</span>,<span class="hljs-string">&#x27;515.127.4566&#x27;</span>,<span class="hljs-string">&#x27;1999-08-10&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">120</span>,<span class="hljs-string">&#x27;Matthew&#x27;</span>,<span class="hljs-string">&#x27;Weiss&#x27;</span>,<span class="hljs-string">&#x27;MWEISS&#x27;</span>,<span class="hljs-string">&#x27;650.123.1234&#x27;</span>,<span class="hljs-string">&#x27;1996-07-18&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">8000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">121</span>,<span class="hljs-string">&#x27;Adam&#x27;</span>,<span class="hljs-string">&#x27;Fripp&#x27;</span>,<span class="hljs-string">&#x27;AFRIPP&#x27;</span>,<span class="hljs-string">&#x27;650.123.2234&#x27;</span>,<span class="hljs-string">&#x27;1997-04-10&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">8200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">122</span>,<span class="hljs-string">&#x27;Payam&#x27;</span>,<span class="hljs-string">&#x27;Kaufling&#x27;</span>,<span class="hljs-string">&#x27;PKAUFLIN&#x27;</span>,<span class="hljs-string">&#x27;650.123.3234&#x27;</span>,<span class="hljs-string">&#x27;1995-05-01&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">7900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;Shanta&#x27;</span>,<span class="hljs-string">&#x27;Vollman&#x27;</span>,<span class="hljs-string">&#x27;SVOLLMAN&#x27;</span>,<span class="hljs-string">&#x27;650.123.4234&#x27;</span>,<span class="hljs-string">&#x27;1997-10-10&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">6500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">124</span>,<span class="hljs-string">&#x27;Kevin&#x27;</span>,<span class="hljs-string">&#x27;Mourgos&#x27;</span>,<span class="hljs-string">&#x27;KMOURGOS&#x27;</span>,<span class="hljs-string">&#x27;650.123.5234&#x27;</span>,<span class="hljs-string">&#x27;1999-11-16&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">5800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">125</span>,<span class="hljs-string">&#x27;Julia&#x27;</span>,<span class="hljs-string">&#x27;Nayer&#x27;</span>,<span class="hljs-string">&#x27;JNAYER&#x27;</span>,<span class="hljs-string">&#x27;650.124.1214&#x27;</span>,<span class="hljs-string">&#x27;1997-07-16&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">126</span>,<span class="hljs-string">&#x27;Irene&#x27;</span>,<span class="hljs-string">&#x27;Mikkilineni&#x27;</span>,<span class="hljs-string">&#x27;IMIKKILI&#x27;</span>,<span class="hljs-string">&#x27;650.124.1224&#x27;</span>,<span class="hljs-string">&#x27;1998-09-28&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2700.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">127</span>,<span class="hljs-string">&#x27;James&#x27;</span>,<span class="hljs-string">&#x27;Landry&#x27;</span>,<span class="hljs-string">&#x27;JLANDRY&#x27;</span>,<span class="hljs-string">&#x27;650.124.1334&#x27;</span>,<span class="hljs-string">&#x27;1999-01-14&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2400.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">128</span>,<span class="hljs-string">&#x27;Steven&#x27;</span>,<span class="hljs-string">&#x27;Markle&#x27;</span>,<span class="hljs-string">&#x27;SMARKLE&#x27;</span>,<span class="hljs-string">&#x27;650.124.1434&#x27;</span>,<span class="hljs-string">&#x27;2000-03-08&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">129</span>,<span class="hljs-string">&#x27;Laura&#x27;</span>,<span class="hljs-string">&#x27;Bissot&#x27;</span>,<span class="hljs-string">&#x27;LBISSOT&#x27;</span>,<span class="hljs-string">&#x27;650.124.5234&#x27;</span>,<span class="hljs-string">&#x27;1997-08-20&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3300.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">130</span>,<span class="hljs-string">&#x27;Mozhe&#x27;</span>,<span class="hljs-string">&#x27;Atkinson&#x27;</span>,<span class="hljs-string">&#x27;MATKINSO&#x27;</span>,<span class="hljs-string">&#x27;650.124.6234&#x27;</span>,<span class="hljs-string">&#x27;1997-10-30&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">131</span>,<span class="hljs-string">&#x27;James&#x27;</span>,<span class="hljs-string">&#x27;Marlow&#x27;</span>,<span class="hljs-string">&#x27;JAMRLOW&#x27;</span>,<span class="hljs-string">&#x27;650.124.7234&#x27;</span>,<span class="hljs-string">&#x27;1997-02-16&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">132</span>,<span class="hljs-string">&#x27;TJ&#x27;</span>,<span class="hljs-string">&#x27;Olson&#x27;</span>,<span class="hljs-string">&#x27;TJOLSON&#x27;</span>,<span class="hljs-string">&#x27;650.124.8234&#x27;</span>,<span class="hljs-string">&#x27;1999-04-10&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">133</span>,<span class="hljs-string">&#x27;Jason&#x27;</span>,<span class="hljs-string">&#x27;Mallin&#x27;</span>,<span class="hljs-string">&#x27;JMALLIN&#x27;</span>,<span class="hljs-string">&#x27;650.127.1934&#x27;</span>,<span class="hljs-string">&#x27;1996-06-14&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3300.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">134</span>,<span class="hljs-string">&#x27;Michael&#x27;</span>,<span class="hljs-string">&#x27;Rogers&#x27;</span>,<span class="hljs-string">&#x27;MROGERS&#x27;</span>,<span class="hljs-string">&#x27;650.127.1834&#x27;</span>,<span class="hljs-string">&#x27;1998-08-26&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">135</span>,<span class="hljs-string">&#x27;Ki&#x27;</span>,<span class="hljs-string">&#x27;Gee&#x27;</span>,<span class="hljs-string">&#x27;KGEE&#x27;</span>,<span class="hljs-string">&#x27;650.127.1734&#x27;</span>,<span class="hljs-string">&#x27;1999-12-12&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2400.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">136</span>,<span class="hljs-string">&#x27;Hazel&#x27;</span>,<span class="hljs-string">&#x27;Philtanker&#x27;</span>,<span class="hljs-string">&#x27;HPHILTAN&#x27;</span>,<span class="hljs-string">&#x27;650.127.1634&#x27;</span>,<span class="hljs-string">&#x27;2000-02-06&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">137</span>,<span class="hljs-string">&#x27;Renske&#x27;</span>,<span class="hljs-string">&#x27;Ladwig&#x27;</span>,<span class="hljs-string">&#x27;RLADWIG&#x27;</span>,<span class="hljs-string">&#x27;650.121.1234&#x27;</span>,<span class="hljs-string">&#x27;1995-07-14&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">138</span>,<span class="hljs-string">&#x27;Stephen&#x27;</span>,<span class="hljs-string">&#x27;Stiles&#x27;</span>,<span class="hljs-string">&#x27;SSTILES&#x27;</span>,<span class="hljs-string">&#x27;650.121.2034&#x27;</span>,<span class="hljs-string">&#x27;1997-10-26&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">139</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;Seo&#x27;</span>,<span class="hljs-string">&#x27;JSEO&#x27;</span>,<span class="hljs-string">&#x27;650.121.2019&#x27;</span>,<span class="hljs-string">&#x27;1998-02-12&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2700.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">140</span>,<span class="hljs-string">&#x27;Joshua&#x27;</span>,<span class="hljs-string">&#x27;Patel&#x27;</span>,<span class="hljs-string">&#x27;JPATEL&#x27;</span>,<span class="hljs-string">&#x27;650.121.1834&#x27;</span>,<span class="hljs-string">&#x27;1998-04-06&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">141</span>,<span class="hljs-string">&#x27;Trenna&#x27;</span>,<span class="hljs-string">&#x27;Rajs&#x27;</span>,<span class="hljs-string">&#x27;TRAJS&#x27;</span>,<span class="hljs-string">&#x27;650.121.8009&#x27;</span>,<span class="hljs-string">&#x27;1995-10-17&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">142</span>,<span class="hljs-string">&#x27;Curtis&#x27;</span>,<span class="hljs-string">&#x27;Davies&#x27;</span>,<span class="hljs-string">&#x27;CDAVIES&#x27;</span>,<span class="hljs-string">&#x27;650.121.2994&#x27;</span>,<span class="hljs-string">&#x27;1997-01-29&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">143</span>,<span class="hljs-string">&#x27;Randall&#x27;</span>,<span class="hljs-string">&#x27;Matos&#x27;</span>,<span class="hljs-string">&#x27;RMATOS&#x27;</span>,<span class="hljs-string">&#x27;650.121.2874&#x27;</span>,<span class="hljs-string">&#x27;1998-03-15&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">144</span>,<span class="hljs-string">&#x27;Peter&#x27;</span>,<span class="hljs-string">&#x27;Vargas&#x27;</span>,<span class="hljs-string">&#x27;PVARGAS&#x27;</span>,<span class="hljs-string">&#x27;650.121.2004&#x27;</span>,<span class="hljs-string">&#x27;1998-07-09&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">145</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;Russell&#x27;</span>,<span class="hljs-string">&#x27;JRUSSEL&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.429268&#x27;</span>,<span class="hljs-string">&#x27;1996-10-01&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">14000.00</span>,<span class="hljs-number">0.40</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">146</span>,<span class="hljs-string">&#x27;Karen&#x27;</span>,<span class="hljs-string">&#x27;Partners&#x27;</span>,<span class="hljs-string">&#x27;KPARTNER&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.467268&#x27;</span>,<span class="hljs-string">&#x27;1997-01-05&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">13500.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">147</span>,<span class="hljs-string">&#x27;Alberto&#x27;</span>,<span class="hljs-string">&#x27;Errazuriz&#x27;</span>,<span class="hljs-string">&#x27;AERRAZUR&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.429278&#x27;</span>,<span class="hljs-string">&#x27;1997-03-10&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">12000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">148</span>,<span class="hljs-string">&#x27;Gerald&#x27;</span>,<span class="hljs-string">&#x27;Cambrault&#x27;</span>,<span class="hljs-string">&#x27;GCAMBRAU&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.619268&#x27;</span>,<span class="hljs-string">&#x27;1999-10-15&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">11000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">149</span>,<span class="hljs-string">&#x27;Eleni&#x27;</span>,<span class="hljs-string">&#x27;Zlotkey&#x27;</span>,<span class="hljs-string">&#x27;EZLOTKEY&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.429018&#x27;</span>,<span class="hljs-string">&#x27;2000-01-29&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">10500.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">150</span>,<span class="hljs-string">&#x27;Peter&#x27;</span>,<span class="hljs-string">&#x27;Tucker&#x27;</span>,<span class="hljs-string">&#x27;PTUCKER&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.129268&#x27;</span>,<span class="hljs-string">&#x27;1997-01-30&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">10000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">151</span>,<span class="hljs-string">&#x27;David&#x27;</span>,<span class="hljs-string">&#x27;Bernstein&#x27;</span>,<span class="hljs-string">&#x27;DBERNSTE&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.345268&#x27;</span>,<span class="hljs-string">&#x27;1997-03-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9500.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">152</span>,<span class="hljs-string">&#x27;Peter&#x27;</span>,<span class="hljs-string">&#x27;Hall&#x27;</span>,<span class="hljs-string">&#x27;PHALL&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.478968&#x27;</span>,<span class="hljs-string">&#x27;1997-08-20&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9000.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">153</span>,<span class="hljs-string">&#x27;Christopher&#x27;</span>,<span class="hljs-string">&#x27;Olsen&#x27;</span>,<span class="hljs-string">&#x27;COLSEN&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.498718&#x27;</span>,<span class="hljs-string">&#x27;1998-03-30&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8000.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">154</span>,<span class="hljs-string">&#x27;Nanette&#x27;</span>,<span class="hljs-string">&#x27;Cambrault&#x27;</span>,<span class="hljs-string">&#x27;NCAMBRAU&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.987668&#x27;</span>,<span class="hljs-string">&#x27;1998-12-09&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7500.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">155</span>,<span class="hljs-string">&#x27;Oliver&#x27;</span>,<span class="hljs-string">&#x27;Tuvault&#x27;</span>,<span class="hljs-string">&#x27;OTUVAULT&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.486508&#x27;</span>,<span class="hljs-string">&#x27;1999-11-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7000.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">156</span>,<span class="hljs-string">&#x27;Janette&#x27;</span>,<span class="hljs-string">&#x27;King&#x27;</span>,<span class="hljs-string">&#x27;JKING&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.429268&#x27;</span>,<span class="hljs-string">&#x27;1996-01-30&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">10000.00</span>,<span class="hljs-number">0.35</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">157</span>,<span class="hljs-string">&#x27;Patrick&#x27;</span>,<span class="hljs-string">&#x27;Sully&#x27;</span>,<span class="hljs-string">&#x27;PSULLY&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.929268&#x27;</span>,<span class="hljs-string">&#x27;1996-03-04&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9500.00</span>,<span class="hljs-number">0.35</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">158</span>,<span class="hljs-string">&#x27;Allan&#x27;</span>,<span class="hljs-string">&#x27;McEwen&#x27;</span>,<span class="hljs-string">&#x27;AMCEWEN&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.829268&#x27;</span>,<span class="hljs-string">&#x27;1996-08-01&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9000.00</span>,<span class="hljs-number">0.35</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">159</span>,<span class="hljs-string">&#x27;Lindsey&#x27;</span>,<span class="hljs-string">&#x27;Smith&#x27;</span>,<span class="hljs-string">&#x27;LSMITH&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.729268&#x27;</span>,<span class="hljs-string">&#x27;1997-03-10&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">160</span>,<span class="hljs-string">&#x27;Louise&#x27;</span>,<span class="hljs-string">&#x27;Doran&#x27;</span>,<span class="hljs-string">&#x27;LDORAN&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.629268&#x27;</span>,<span class="hljs-string">&#x27;1997-12-15&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7500.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">161</span>,<span class="hljs-string">&#x27;Sarath&#x27;</span>,<span class="hljs-string">&#x27;Sewall&#x27;</span>,<span class="hljs-string">&#x27;SSEWALL&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.529268&#x27;</span>,<span class="hljs-string">&#x27;1998-11-03&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7000.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">162</span>,<span class="hljs-string">&#x27;Clara&#x27;</span>,<span class="hljs-string">&#x27;Vishney&#x27;</span>,<span class="hljs-string">&#x27;CVISHNEY&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.129268&#x27;</span>,<span class="hljs-string">&#x27;1997-11-11&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">10500.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">163</span>,<span class="hljs-string">&#x27;Danielle&#x27;</span>,<span class="hljs-string">&#x27;Greene&#x27;</span>,<span class="hljs-string">&#x27;DGREENE&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.229268&#x27;</span>,<span class="hljs-string">&#x27;1999-03-19&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9500.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">164</span>,<span class="hljs-string">&#x27;Mattea&#x27;</span>,<span class="hljs-string">&#x27;Marvins&#x27;</span>,<span class="hljs-string">&#x27;MMARVINS&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.329268&#x27;</span>,<span class="hljs-string">&#x27;2000-01-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7200.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">165</span>,<span class="hljs-string">&#x27;David&#x27;</span>,<span class="hljs-string">&#x27;Lee&#x27;</span>,<span class="hljs-string">&#x27;DLEE&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.529268&#x27;</span>,<span class="hljs-string">&#x27;2000-02-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6800.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">166</span>,<span class="hljs-string">&#x27;Sundar&#x27;</span>,<span class="hljs-string">&#x27;Ande&#x27;</span>,<span class="hljs-string">&#x27;SANDE&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.629268&#x27;</span>,<span class="hljs-string">&#x27;2000-03-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6400.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">167</span>,<span class="hljs-string">&#x27;Amit&#x27;</span>,<span class="hljs-string">&#x27;Banda&#x27;</span>,<span class="hljs-string">&#x27;ABANDA&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.729268&#x27;</span>,<span class="hljs-string">&#x27;2000-04-21&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6200.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">168</span>,<span class="hljs-string">&#x27;Lisa&#x27;</span>,<span class="hljs-string">&#x27;Ozer&#x27;</span>,<span class="hljs-string">&#x27;LOZER&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.929268&#x27;</span>,<span class="hljs-string">&#x27;1997-03-11&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">11500.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">169</span>,<span class="hljs-string">&#x27;Harrison&#x27;</span>,<span class="hljs-string">&#x27;Bloom&#x27;</span>,<span class="hljs-string">&#x27;HBLOOM&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.829268&#x27;</span>,<span class="hljs-string">&#x27;1998-03-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">10000.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">170</span>,<span class="hljs-string">&#x27;Tayler&#x27;</span>,<span class="hljs-string">&#x27;Fox&#x27;</span>,<span class="hljs-string">&#x27;TFOX&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.729268&#x27;</span>,<span class="hljs-string">&#x27;1998-01-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9600.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">171</span>,<span class="hljs-string">&#x27;William&#x27;</span>,<span class="hljs-string">&#x27;Smith&#x27;</span>,<span class="hljs-string">&#x27;WSMITH&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.629268&#x27;</span>,<span class="hljs-string">&#x27;1999-02-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7400.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">172</span>,<span class="hljs-string">&#x27;Elizabeth&#x27;</span>,<span class="hljs-string">&#x27;Bates&#x27;</span>,<span class="hljs-string">&#x27;EBATES&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.529268&#x27;</span>,<span class="hljs-string">&#x27;1999-03-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7300.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">173</span>,<span class="hljs-string">&#x27;Sundita&#x27;</span>,<span class="hljs-string">&#x27;Kumar&#x27;</span>,<span class="hljs-string">&#x27;SKUMAR&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.329268&#x27;</span>,<span class="hljs-string">&#x27;2000-04-21&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6100.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">174</span>,<span class="hljs-string">&#x27;Ellen&#x27;</span>,<span class="hljs-string">&#x27;Abel&#x27;</span>,<span class="hljs-string">&#x27;EABEL&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429267&#x27;</span>,<span class="hljs-string">&#x27;1996-05-11&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">11000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">175</span>,<span class="hljs-string">&#x27;Alyssa&#x27;</span>,<span class="hljs-string">&#x27;Hutton&#x27;</span>,<span class="hljs-string">&#x27;AHUTTON&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429266&#x27;</span>,<span class="hljs-string">&#x27;1997-03-19&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8800.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">176</span>,<span class="hljs-string">&#x27;Jonathon&#x27;</span>,<span class="hljs-string">&#x27;Taylor&#x27;</span>,<span class="hljs-string">&#x27;JTAYLOR&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429265&#x27;</span>,<span class="hljs-string">&#x27;1998-03-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8600.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">177</span>,<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-string">&#x27;Livingston&#x27;</span>,<span class="hljs-string">&#x27;JLIVINGS&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429264&#x27;</span>,<span class="hljs-string">&#x27;1998-04-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8400.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">178</span>,<span class="hljs-string">&#x27;Kimberely&#x27;</span>,<span class="hljs-string">&#x27;Grant&#x27;</span>,<span class="hljs-string">&#x27;KGRANT&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429263&#x27;</span>,<span class="hljs-string">&#x27;1999-05-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7000.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">149</span>,<span class="hljs-keyword">NULL</span>),(<span class="hljs-number">179</span>,<span class="hljs-string">&#x27;Charles&#x27;</span>,<span class="hljs-string">&#x27;Johnson&#x27;</span>,<span class="hljs-string">&#x27;CJOHNSON&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429262&#x27;</span>,<span class="hljs-string">&#x27;2000-01-04&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6200.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">180</span>,<span class="hljs-string">&#x27;Winston&#x27;</span>,<span class="hljs-string">&#x27;Taylor&#x27;</span>,<span class="hljs-string">&#x27;WTAYLOR&#x27;</span>,<span class="hljs-string">&#x27;650.507.9876&#x27;</span>,<span class="hljs-string">&#x27;1998-01-24&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">181</span>,<span class="hljs-string">&#x27;Jean&#x27;</span>,<span class="hljs-string">&#x27;Fleaur&#x27;</span>,<span class="hljs-string">&#x27;JFLEAUR&#x27;</span>,<span class="hljs-string">&#x27;650.507.9877&#x27;</span>,<span class="hljs-string">&#x27;1998-02-23&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">182</span>,<span class="hljs-string">&#x27;Martha&#x27;</span>,<span class="hljs-string">&#x27;Sullivan&#x27;</span>,<span class="hljs-string">&#x27;MSULLIVA&#x27;</span>,<span class="hljs-string">&#x27;650.507.9878&#x27;</span>,<span class="hljs-string">&#x27;1999-06-21&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">183</span>,<span class="hljs-string">&#x27;Girard&#x27;</span>,<span class="hljs-string">&#x27;Geoni&#x27;</span>,<span class="hljs-string">&#x27;GGEONI&#x27;</span>,<span class="hljs-string">&#x27;650.507.9879&#x27;</span>,<span class="hljs-string">&#x27;2000-02-03&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">184</span>,<span class="hljs-string">&#x27;Nandita&#x27;</span>,<span class="hljs-string">&#x27;Sarchand&#x27;</span>,<span class="hljs-string">&#x27;NSARCHAN&#x27;</span>,<span class="hljs-string">&#x27;650.509.1876&#x27;</span>,<span class="hljs-string">&#x27;1996-01-27&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">4200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">185</span>,<span class="hljs-string">&#x27;Alexis&#x27;</span>,<span class="hljs-string">&#x27;Bull&#x27;</span>,<span class="hljs-string">&#x27;ABULL&#x27;</span>,<span class="hljs-string">&#x27;650.509.2876&#x27;</span>,<span class="hljs-string">&#x27;1997-02-20&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">4100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">186</span>,<span class="hljs-string">&#x27;Julia&#x27;</span>,<span class="hljs-string">&#x27;Dellinger&#x27;</span>,<span class="hljs-string">&#x27;JDELLING&#x27;</span>,<span class="hljs-string">&#x27;650.509.3876&#x27;</span>,<span class="hljs-string">&#x27;1998-06-24&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3400.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">187</span>,<span class="hljs-string">&#x27;Anthony&#x27;</span>,<span class="hljs-string">&#x27;Cabrio&#x27;</span>,<span class="hljs-string">&#x27;ACABRIO&#x27;</span>,<span class="hljs-string">&#x27;650.509.4876&#x27;</span>,<span class="hljs-string">&#x27;1999-02-07&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">188</span>,<span class="hljs-string">&#x27;Kelly&#x27;</span>,<span class="hljs-string">&#x27;Chung&#x27;</span>,<span class="hljs-string">&#x27;KCHUNG&#x27;</span>,<span class="hljs-string">&#x27;650.505.1876&#x27;</span>,<span class="hljs-string">&#x27;1997-06-14&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">189</span>,<span class="hljs-string">&#x27;Jennifer&#x27;</span>,<span class="hljs-string">&#x27;Dilly&#x27;</span>,<span class="hljs-string">&#x27;JDILLY&#x27;</span>,<span class="hljs-string">&#x27;650.505.2876&#x27;</span>,<span class="hljs-string">&#x27;1997-08-13&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">190</span>,<span class="hljs-string">&#x27;Timothy&#x27;</span>,<span class="hljs-string">&#x27;Gates&#x27;</span>,<span class="hljs-string">&#x27;TGATES&#x27;</span>,<span class="hljs-string">&#x27;650.505.3876&#x27;</span>,<span class="hljs-string">&#x27;1998-07-11&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">191</span>,<span class="hljs-string">&#x27;Randall&#x27;</span>,<span class="hljs-string">&#x27;Perkins&#x27;</span>,<span class="hljs-string">&#x27;RPERKINS&#x27;</span>,<span class="hljs-string">&#x27;650.505.4876&#x27;</span>,<span class="hljs-string">&#x27;1999-12-19&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">192</span>,<span class="hljs-string">&#x27;Sarah&#x27;</span>,<span class="hljs-string">&#x27;Bell&#x27;</span>,<span class="hljs-string">&#x27;SBELL&#x27;</span>,<span class="hljs-string">&#x27;650.501.1876&#x27;</span>,<span class="hljs-string">&#x27;1996-02-04&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">4000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">193</span>,<span class="hljs-string">&#x27;Britney&#x27;</span>,<span class="hljs-string">&#x27;Everett&#x27;</span>,<span class="hljs-string">&#x27;BEVERETT&#x27;</span>,<span class="hljs-string">&#x27;650.501.2876&#x27;</span>,<span class="hljs-string">&#x27;1997-03-03&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">194</span>,<span class="hljs-string">&#x27;Samuel&#x27;</span>,<span class="hljs-string">&#x27;McCain&#x27;</span>,<span class="hljs-string">&#x27;SMCCAIN&#x27;</span>,<span class="hljs-string">&#x27;650.501.3876&#x27;</span>,<span class="hljs-string">&#x27;1998-07-01&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">195</span>,<span class="hljs-string">&#x27;Vance&#x27;</span>,<span class="hljs-string">&#x27;Jones&#x27;</span>,<span class="hljs-string">&#x27;VJONES&#x27;</span>,<span class="hljs-string">&#x27;650.501.4876&#x27;</span>,<span class="hljs-string">&#x27;1999-03-17&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">196</span>,<span class="hljs-string">&#x27;Alana&#x27;</span>,<span class="hljs-string">&#x27;Walsh&#x27;</span>,<span class="hljs-string">&#x27;AWALSH&#x27;</span>,<span class="hljs-string">&#x27;650.507.9811&#x27;</span>,<span class="hljs-string">&#x27;1998-04-24&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">197</span>,<span class="hljs-string">&#x27;Kevin&#x27;</span>,<span class="hljs-string">&#x27;Feeney&#x27;</span>,<span class="hljs-string">&#x27;KFEENEY&#x27;</span>,<span class="hljs-string">&#x27;650.507.9822&#x27;</span>,<span class="hljs-string">&#x27;1998-05-23&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">198</span>,<span class="hljs-string">&#x27;Donald&#x27;</span>,<span class="hljs-string">&#x27;OConnell&#x27;</span>,<span class="hljs-string">&#x27;DOCONNEL&#x27;</span>,<span class="hljs-string">&#x27;650.507.9833&#x27;</span>,<span class="hljs-string">&#x27;1999-06-21&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">199</span>,<span class="hljs-string">&#x27;Douglas&#x27;</span>,<span class="hljs-string">&#x27;Grant&#x27;</span>,<span class="hljs-string">&#x27;DGRANT&#x27;</span>,<span class="hljs-string">&#x27;650.507.9844&#x27;</span>,<span class="hljs-string">&#x27;2000-01-13&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;Jennifer&#x27;</span>,<span class="hljs-string">&#x27;Whalen&#x27;</span>,<span class="hljs-string">&#x27;JWHALEN&#x27;</span>,<span class="hljs-string">&#x27;515.123.4444&#x27;</span>,<span class="hljs-string">&#x27;1987-09-17&#x27;</span>,<span class="hljs-string">&#x27;AD_ASST&#x27;</span>,<span class="hljs-number">4400.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">10</span>),(<span class="hljs-number">201</span>,<span class="hljs-string">&#x27;Michael&#x27;</span>,<span class="hljs-string">&#x27;Hartstein&#x27;</span>,<span class="hljs-string">&#x27;MHARTSTE&#x27;</span>,<span class="hljs-string">&#x27;515.123.5555&#x27;</span>,<span class="hljs-string">&#x27;1996-02-17&#x27;</span>,<span class="hljs-string">&#x27;MK_MAN&#x27;</span>,<span class="hljs-number">13000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">202</span>,<span class="hljs-string">&#x27;Pat&#x27;</span>,<span class="hljs-string">&#x27;Fay&#x27;</span>,<span class="hljs-string">&#x27;PFAY&#x27;</span>,<span class="hljs-string">&#x27;603.123.6666&#x27;</span>,<span class="hljs-string">&#x27;1997-08-17&#x27;</span>,<span class="hljs-string">&#x27;MK_REP&#x27;</span>,<span class="hljs-number">6000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">201</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">203</span>,<span class="hljs-string">&#x27;Susan&#x27;</span>,<span class="hljs-string">&#x27;Mavris&#x27;</span>,<span class="hljs-string">&#x27;SMAVRIS&#x27;</span>,<span class="hljs-string">&#x27;515.123.7777&#x27;</span>,<span class="hljs-string">&#x27;1994-06-07&#x27;</span>,<span class="hljs-string">&#x27;HR_REP&#x27;</span>,<span class="hljs-number">6500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>),(<span class="hljs-number">204</span>,<span class="hljs-string">&#x27;Hermann&#x27;</span>,<span class="hljs-string">&#x27;Baer&#x27;</span>,<span class="hljs-string">&#x27;HBAER&#x27;</span>,<span class="hljs-string">&#x27;515.123.8888&#x27;</span>,<span class="hljs-string">&#x27;1994-06-07&#x27;</span>,<span class="hljs-string">&#x27;PR_REP&#x27;</span>,<span class="hljs-number">10000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">70</span>),(<span class="hljs-number">205</span>,<span class="hljs-string">&#x27;Shelley&#x27;</span>,<span class="hljs-string">&#x27;Higgins&#x27;</span>,<span class="hljs-string">&#x27;SHIGGINS&#x27;</span>,<span class="hljs-string">&#x27;515.123.8080&#x27;</span>,<span class="hljs-string">&#x27;1994-06-07&#x27;</span>,<span class="hljs-string">&#x27;AC_MGR&#x27;</span>,<span class="hljs-number">12000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>),(<span class="hljs-number">206</span>,<span class="hljs-string">&#x27;William&#x27;</span>,<span class="hljs-string">&#x27;Gietz&#x27;</span>,<span class="hljs-string">&#x27;WGIETZ&#x27;</span>,<span class="hljs-string">&#x27;515.123.8181&#x27;</span>,<span class="hljs-string">&#x27;1994-06-07&#x27;</span>,<span class="hljs-string">&#x27;AC_ACCOUNT&#x27;</span>,<span class="hljs-number">8300.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">205</span>,<span class="hljs-number">110</span>);<br><br><span class="hljs-comment">/*Table structure for table `job_grades` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `job_grades`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `job_grades` (<br>  `grade_level` <span class="hljs-type">varchar</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `lowest_sal` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `highest_sal` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `job_grades` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `job_grades`(`grade_level`,`lowest_sal`,`highest_sal`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">2999</span>),(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">5999</span>),(<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-number">6000</span>,<span class="hljs-number">9999</span>),(<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">14999</span>),(<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-number">15000</span>,<span class="hljs-number">24999</span>),(<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-number">25000</span>,<span class="hljs-number">40000</span>);<br><br><span class="hljs-comment">/*Table structure for table `job_history` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `job_history`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `job_history` (<br>  `employee_id` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `start_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `end_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `job_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `department_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`employee_id`,`start_date`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `jhist_emp_id_st_date_pk` (`employee_id`,`start_date`),<br>  KEY `jhist_job_fk` (`job_id`),<br>  KEY `jhist_dept_fk` (`department_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `jhist_dept_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`department_id`) <span class="hljs-keyword">REFERENCES</span> `departments` (`department_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `jhist_emp_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`employee_id`) <span class="hljs-keyword">REFERENCES</span> `employees` (`employee_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `jhist_job_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`job_id`) <span class="hljs-keyword">REFERENCES</span> `jobs` (`job_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `job_history` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `job_history`(`employee_id`,`start_date`,`end_date`,`job_id`,`department_id`) <span class="hljs-keyword">values</span> (<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;1989-09-21&#x27;</span>,<span class="hljs-string">&#x27;1993-10-27&#x27;</span>,<span class="hljs-string">&#x27;AC_ACCOUNT&#x27;</span>,<span class="hljs-number">110</span>),(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;1993-10-28&#x27;</span>,<span class="hljs-string">&#x27;1997-03-15&#x27;</span>,<span class="hljs-string">&#x27;AC_MGR&#x27;</span>,<span class="hljs-number">110</span>),(<span class="hljs-number">102</span>,<span class="hljs-string">&#x27;1993-01-13&#x27;</span>,<span class="hljs-string">&#x27;1998-07-24&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">114</span>,<span class="hljs-string">&#x27;1998-03-24&#x27;</span>,<span class="hljs-string">&#x27;1999-12-31&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">122</span>,<span class="hljs-string">&#x27;1999-01-01&#x27;</span>,<span class="hljs-string">&#x27;1999-12-31&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">176</span>,<span class="hljs-string">&#x27;1998-03-24&#x27;</span>,<span class="hljs-string">&#x27;1998-12-31&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">176</span>,<span class="hljs-string">&#x27;1999-01-01&#x27;</span>,<span class="hljs-string">&#x27;1999-12-31&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;1987-09-17&#x27;</span>,<span class="hljs-string">&#x27;1993-06-17&#x27;</span>,<span class="hljs-string">&#x27;AD_ASST&#x27;</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;1994-07-01&#x27;</span>,<span class="hljs-string">&#x27;1998-12-31&#x27;</span>,<span class="hljs-string">&#x27;AC_ACCOUNT&#x27;</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">201</span>,<span class="hljs-string">&#x27;1996-02-17&#x27;</span>,<span class="hljs-string">&#x27;1999-12-19&#x27;</span>,<span class="hljs-string">&#x27;MK_REP&#x27;</span>,<span class="hljs-number">20</span>);<br><br><span class="hljs-comment">/*Table structure for table `jobs` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `jobs`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `jobs` (<br>  `job_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `job_title` <span class="hljs-type">varchar</span>(<span class="hljs-number">35</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `min_salary` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `max_salary` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`job_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `job_id_pk` (`job_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `jobs` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `jobs`(`job_id`,`job_title`,`min_salary`,`max_salary`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;AC_ACCOUNT&#x27;</span>,<span class="hljs-string">&#x27;Public Accountant&#x27;</span>,<span class="hljs-number">4200</span>,<span class="hljs-number">9000</span>),(<span class="hljs-string">&#x27;AC_MGR&#x27;</span>,<span class="hljs-string">&#x27;Accounting Manager&#x27;</span>,<span class="hljs-number">8200</span>,<span class="hljs-number">16000</span>),(<span class="hljs-string">&#x27;AD_ASST&#x27;</span>,<span class="hljs-string">&#x27;Administration Assistant&#x27;</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">6000</span>),(<span class="hljs-string">&#x27;AD_PRES&#x27;</span>,<span class="hljs-string">&#x27;President&#x27;</span>,<span class="hljs-number">20000</span>,<span class="hljs-number">40000</span>),(<span class="hljs-string">&#x27;AD_VP&#x27;</span>,<span class="hljs-string">&#x27;Administration Vice President&#x27;</span>,<span class="hljs-number">15000</span>,<span class="hljs-number">30000</span>),(<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-string">&#x27;Accountant&#x27;</span>,<span class="hljs-number">4200</span>,<span class="hljs-number">9000</span>),(<span class="hljs-string">&#x27;FI_MGR&#x27;</span>,<span class="hljs-string">&#x27;Finance Manager&#x27;</span>,<span class="hljs-number">8200</span>,<span class="hljs-number">16000</span>),(<span class="hljs-string">&#x27;HR_REP&#x27;</span>,<span class="hljs-string">&#x27;Human Resources Representative&#x27;</span>,<span class="hljs-number">4000</span>,<span class="hljs-number">9000</span>),(<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-string">&#x27;Programmer&#x27;</span>,<span class="hljs-number">4000</span>,<span class="hljs-number">10000</span>),(<span class="hljs-string">&#x27;MK_MAN&#x27;</span>,<span class="hljs-string">&#x27;Marketing Manager&#x27;</span>,<span class="hljs-number">9000</span>,<span class="hljs-number">15000</span>),(<span class="hljs-string">&#x27;MK_REP&#x27;</span>,<span class="hljs-string">&#x27;Marketing Representative&#x27;</span>,<span class="hljs-number">4000</span>,<span class="hljs-number">9000</span>),(<span class="hljs-string">&#x27;PR_REP&#x27;</span>,<span class="hljs-string">&#x27;Public Relations Representative&#x27;</span>,<span class="hljs-number">4500</span>,<span class="hljs-number">10500</span>),(<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-string">&#x27;Purchasing Clerk&#x27;</span>,<span class="hljs-number">2500</span>,<span class="hljs-number">5500</span>),(<span class="hljs-string">&#x27;PU_MAN&#x27;</span>,<span class="hljs-string">&#x27;Purchasing Manager&#x27;</span>,<span class="hljs-number">8000</span>,<span class="hljs-number">15000</span>),(<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-string">&#x27;Sales Manager&#x27;</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">20000</span>),(<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-string">&#x27;Sales Representative&#x27;</span>,<span class="hljs-number">6000</span>,<span class="hljs-number">12000</span>),(<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-string">&#x27;Shipping Clerk&#x27;</span>,<span class="hljs-number">2500</span>,<span class="hljs-number">5500</span>),(<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-string">&#x27;Stock Clerk&#x27;</span>,<span class="hljs-number">2000</span>,<span class="hljs-number">5000</span>),(<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-string">&#x27;Stock Manager&#x27;</span>,<span class="hljs-number">5500</span>,<span class="hljs-number">8500</span>);<br><br><span class="hljs-comment">/*Table structure for table `locations` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `locations`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `locations` (<br>  `location_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `street_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `postal_code` <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `state_province` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `country_id` <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`location_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `loc_id_pk` (`location_id`),<br>  KEY `loc_c_id_fk` (`country_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `loc_c_id_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`country_id`) <span class="hljs-keyword">REFERENCES</span> `countries` (`country_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `locations` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `locations`(`location_id`,`street_address`,`postal_code`,`city`,`state_province`,`country_id`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1000</span>,<span class="hljs-string">&#x27;1297 Via Cola di Rie&#x27;</span>,<span class="hljs-string">&#x27;00989&#x27;</span>,<span class="hljs-string">&#x27;Roma&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;IT&#x27;</span>),(<span class="hljs-number">1100</span>,<span class="hljs-string">&#x27;93091 Calle della Testa&#x27;</span>,<span class="hljs-string">&#x27;10934&#x27;</span>,<span class="hljs-string">&#x27;Venice&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;IT&#x27;</span>),(<span class="hljs-number">1200</span>,<span class="hljs-string">&#x27;2017 Shinjuku-ku&#x27;</span>,<span class="hljs-string">&#x27;1689&#x27;</span>,<span class="hljs-string">&#x27;Tokyo&#x27;</span>,<span class="hljs-string">&#x27;Tokyo Prefecture&#x27;</span>,<span class="hljs-string">&#x27;JP&#x27;</span>),(<span class="hljs-number">1300</span>,<span class="hljs-string">&#x27;9450 Kamiya-cho&#x27;</span>,<span class="hljs-string">&#x27;6823&#x27;</span>,<span class="hljs-string">&#x27;Hiroshima&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;JP&#x27;</span>),(<span class="hljs-number">1400</span>,<span class="hljs-string">&#x27;2014 Jabberwocky Rd&#x27;</span>,<span class="hljs-string">&#x27;26192&#x27;</span>,<span class="hljs-string">&#x27;Southlake&#x27;</span>,<span class="hljs-string">&#x27;Texas&#x27;</span>,<span class="hljs-string">&#x27;US&#x27;</span>),(<span class="hljs-number">1500</span>,<span class="hljs-string">&#x27;2011 Interiors Blvd&#x27;</span>,<span class="hljs-string">&#x27;99236&#x27;</span>,<span class="hljs-string">&#x27;South San Francisco&#x27;</span>,<span class="hljs-string">&#x27;California&#x27;</span>,<span class="hljs-string">&#x27;US&#x27;</span>),(<span class="hljs-number">1600</span>,<span class="hljs-string">&#x27;2007 Zagora St&#x27;</span>,<span class="hljs-string">&#x27;50090&#x27;</span>,<span class="hljs-string">&#x27;South Brunswick&#x27;</span>,<span class="hljs-string">&#x27;New Jersey&#x27;</span>,<span class="hljs-string">&#x27;US&#x27;</span>),(<span class="hljs-number">1700</span>,<span class="hljs-string">&#x27;2004 Charade Rd&#x27;</span>,<span class="hljs-string">&#x27;98199&#x27;</span>,<span class="hljs-string">&#x27;Seattle&#x27;</span>,<span class="hljs-string">&#x27;Washington&#x27;</span>,<span class="hljs-string">&#x27;US&#x27;</span>),(<span class="hljs-number">1800</span>,<span class="hljs-string">&#x27;147 Spadina Ave&#x27;</span>,<span class="hljs-string">&#x27;M5V 2L7&#x27;</span>,<span class="hljs-string">&#x27;Toronto&#x27;</span>,<span class="hljs-string">&#x27;Ontario&#x27;</span>,<span class="hljs-string">&#x27;CA&#x27;</span>),(<span class="hljs-number">1900</span>,<span class="hljs-string">&#x27;6092 Boxwood St&#x27;</span>,<span class="hljs-string">&#x27;YSW 9T2&#x27;</span>,<span class="hljs-string">&#x27;Whitehorse&#x27;</span>,<span class="hljs-string">&#x27;Yukon&#x27;</span>,<span class="hljs-string">&#x27;CA&#x27;</span>),(<span class="hljs-number">2000</span>,<span class="hljs-string">&#x27;40-5-12 Laogianggen&#x27;</span>,<span class="hljs-string">&#x27;190518&#x27;</span>,<span class="hljs-string">&#x27;Beijing&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;CN&#x27;</span>),(<span class="hljs-number">2100</span>,<span class="hljs-string">&#x27;1298 Vileparle (E)&#x27;</span>,<span class="hljs-string">&#x27;490231&#x27;</span>,<span class="hljs-string">&#x27;Bombay&#x27;</span>,<span class="hljs-string">&#x27;Maharashtra&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>),(<span class="hljs-number">2200</span>,<span class="hljs-string">&#x27;12-98 Victoria Street&#x27;</span>,<span class="hljs-string">&#x27;2901&#x27;</span>,<span class="hljs-string">&#x27;Sydney&#x27;</span>,<span class="hljs-string">&#x27;New South Wales&#x27;</span>,<span class="hljs-string">&#x27;AU&#x27;</span>),(<span class="hljs-number">2300</span>,<span class="hljs-string">&#x27;198 Clementi North&#x27;</span>,<span class="hljs-string">&#x27;540198&#x27;</span>,<span class="hljs-string">&#x27;Singapore&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;SG&#x27;</span>),(<span class="hljs-number">2400</span>,<span class="hljs-string">&#x27;8204 Arthur St&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;London&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;UK&#x27;</span>),(<span class="hljs-number">2500</span>,<span class="hljs-string">&#x27;Magdalen Centre, The Oxford Science Park&#x27;</span>,<span class="hljs-string">&#x27;OX9 9ZB&#x27;</span>,<span class="hljs-string">&#x27;Oxford&#x27;</span>,<span class="hljs-string">&#x27;Oxford&#x27;</span>,<span class="hljs-string">&#x27;UK&#x27;</span>),(<span class="hljs-number">2600</span>,<span class="hljs-string">&#x27;9702 Chester Road&#x27;</span>,<span class="hljs-string">&#x27;09629850293&#x27;</span>,<span class="hljs-string">&#x27;Stretford&#x27;</span>,<span class="hljs-string">&#x27;Manchester&#x27;</span>,<span class="hljs-string">&#x27;UK&#x27;</span>),(<span class="hljs-number">2700</span>,<span class="hljs-string">&#x27;Schwanthalerstr. 7031&#x27;</span>,<span class="hljs-string">&#x27;80925&#x27;</span>,<span class="hljs-string">&#x27;Munich&#x27;</span>,<span class="hljs-string">&#x27;Bavaria&#x27;</span>,<span class="hljs-string">&#x27;DE&#x27;</span>),(<span class="hljs-number">2800</span>,<span class="hljs-string">&#x27;Rua Frei Caneca 1360 &#x27;</span>,<span class="hljs-string">&#x27;01307-002&#x27;</span>,<span class="hljs-string">&#x27;Sao Paulo&#x27;</span>,<span class="hljs-string">&#x27;Sao Paulo&#x27;</span>,<span class="hljs-string">&#x27;BR&#x27;</span>),(<span class="hljs-number">2900</span>,<span class="hljs-string">&#x27;20 Rue des Corps-Saints&#x27;</span>,<span class="hljs-string">&#x27;1730&#x27;</span>,<span class="hljs-string">&#x27;Geneva&#x27;</span>,<span class="hljs-string">&#x27;Geneve&#x27;</span>,<span class="hljs-string">&#x27;CH&#x27;</span>),(<span class="hljs-number">3000</span>,<span class="hljs-string">&#x27;Murtenstrasse 921&#x27;</span>,<span class="hljs-string">&#x27;3095&#x27;</span>,<span class="hljs-string">&#x27;Bern&#x27;</span>,<span class="hljs-string">&#x27;BE&#x27;</span>,<span class="hljs-string">&#x27;CH&#x27;</span>),(<span class="hljs-number">3100</span>,<span class="hljs-string">&#x27;Pieter Breughelstraat 837&#x27;</span>,<span class="hljs-string">&#x27;3029SK&#x27;</span>,<span class="hljs-string">&#x27;Utrecht&#x27;</span>,<span class="hljs-string">&#x27;Utrecht&#x27;</span>,<span class="hljs-string">&#x27;NL&#x27;</span>),(<span class="hljs-number">3200</span>,<span class="hljs-string">&#x27;Mariano Escobedo 9991&#x27;</span>,<span class="hljs-string">&#x27;11932&#x27;</span>,<span class="hljs-string">&#x27;Mexico City&#x27;</span>,<span class="hljs-string">&#x27;Distrito Federal,&#x27;</span>,<span class="hljs-string">&#x27;MX&#x27;</span>);<br><br><span class="hljs-comment">/*Table structure for table `order` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">order</span>`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">order</span>` (<br>  `order_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `order_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `order` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `<span class="hljs-keyword">order</span>`(`order_id`,`order_name`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;shkstart&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;tomcat&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;dubbo&#x27;</span>);<br><br><span class="hljs-comment">/*Table structure for table `regions` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `regions`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `regions` (<br>  `region_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `region_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`region_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `reg_id_pk` (`region_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `regions` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `regions`(`region_id`,`region_name`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Europe&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Americas&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Asia&#x27;</span>),(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;Middle East and Africa&#x27;</span>);<br><br><span class="hljs-comment">/*Table structure for table `emp_details_view` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `emp_details_view`;<br><br><span class="hljs-comment">/*!50001 DROP VIEW IF EXISTS `emp_details_view` */</span>;<br><span class="hljs-comment">/*!50001 DROP TABLE IF EXISTS `emp_details_view` */</span>;<br><br><span class="hljs-comment">/*!50001 CREATE TABLE  `emp_details_view`(</span><br><span class="hljs-comment"> `employee_id` int(6) ,</span><br><span class="hljs-comment"> `job_id` varchar(10) ,</span><br><span class="hljs-comment"> `manager_id` int(6) ,</span><br><span class="hljs-comment"> `department_id` int(4) ,</span><br><span class="hljs-comment"> `location_id` int(4) ,</span><br><span class="hljs-comment"> `country_id` char(2) ,</span><br><span class="hljs-comment"> `first_name` varchar(20) ,</span><br><span class="hljs-comment"> `last_name` varchar(25) ,</span><br><span class="hljs-comment"> `salary` double(8,2) ,</span><br><span class="hljs-comment"> `commission_pct` double(2,2) ,</span><br><span class="hljs-comment"> `department_name` varchar(30) ,</span><br><span class="hljs-comment"> `job_title` varchar(35) ,</span><br><span class="hljs-comment"> `city` varchar(30) ,</span><br><span class="hljs-comment"> `state_province` varchar(25) ,</span><br><span class="hljs-comment"> `country_name` varchar(40) ,</span><br><span class="hljs-comment"> `region_name` varchar(25) </span><br><span class="hljs-comment">)*/</span>;<br><br><span class="hljs-comment">/*View structure for view emp_details_view */</span><br><br><span class="hljs-comment">/*!50001 DROP TABLE IF EXISTS `emp_details_view` */</span>;<br><span class="hljs-comment">/*!50001 DROP VIEW IF EXISTS `emp_details_view` */</span>;<br><br><span class="hljs-comment">/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `emp_details_view` AS select `e`.`employee_id` AS `employee_id`,`e`.`job_id` AS `job_id`,`e`.`manager_id` AS `manager_id`,`e`.`department_id` AS `department_id`,`d`.`location_id` AS `location_id`,`l`.`country_id` AS `country_id`,`e`.`first_name` AS `first_name`,`e`.`last_name` AS `last_name`,`e`.`salary` AS `salary`,`e`.`commission_pct` AS `commission_pct`,`d`.`department_name` AS `department_name`,`j`.`job_title` AS `job_title`,`l`.`city` AS `city`,`l`.`state_province` AS `state_province`,`c`.`country_name` AS `country_name`,`r`.`region_name` AS `region_name` from (((((`employees` `e` join `departments` `d`) join `jobs` `j`) join `locations` `l`) join `countries` `c`) join `regions` `r`) where ((`e`.`department_id` = `d`.`department_id`) and (`d`.`location_id` = `l`.`location_id`) and (`l`.`country_id` = `c`.`country_id`) and (`c`.`region_id` = `r`.`region_id`) and (`j`.`job_id` = `e`.`job_id`)) */</span>;<br><br><span class="hljs-comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;<br><span class="hljs-comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;<br><span class="hljs-comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;<br><span class="hljs-comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>排序数据</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/5_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/5_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h1><h2 id="sql语句的执行顺序"><a href="#sql语句的执行顺序" class="headerlink" title="sql语句的执行顺序"></a>sql语句的执行顺序</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">1.先经过FROM过滤条件，筛选出数据<br>2.再经过SELECT查询需求截取数据，并发现某列具备别名<br>3.最后看ORDER BY的排序补充，因此别名也可以在此运用<br></code></pre></td></tr></table></figure><h2 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h2><ul><li>ORDER BY<ul><li>ASC升序(ascend) 默认</li><li>DESC倒序(descend)</li></ul></li></ul><p>没有排序操作，默认按添加数据的顺序进行排序，可以用列的别名编写排序</p><p>按照salary从高到低的顺序显示员工信息（一级排序）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-keyword">SELECT</span> employee_id,salary <span class="hljs-string">&#x27;employee_salary&#x27;</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> employee_salary <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821175616652.png" alt="image-20230821175616652"></p><p>按照salary从高到低的顺序显示员工信息的基础上，对salary升序排列（二级排序）</p><p><img src="/assets/image-20230821182111105.png" alt="image-20230821182111105"></p><p>补充</p><p>先对department_id升序排列再对相同department_id的salary进行升序排列</p><p><img src="/assets/image-20230821182237755.png" alt="image-20230821182237755"></p><h1 id="分页操作"><a href="#分页操作" class="headerlink" title="分页操作"></a>分页操作</h1><p>关键字LIMIT 从第n条数据开始往后查看m条数据 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">LIMIT n,m<br>或<br>LIMIT m          默认LIMIT <span class="hljs-number">0</span>,m<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821183035480.png" alt="image-20230821183035480"></p><p>需求：每页显示pageSize条记录，此时显示第pageNo页：<br>公式：LIMIT (pageNo - 1) * pagesize , pagesize;</p><p><img src="/assets/image-20230821183629895.png" alt="image-20230821183629895"></p><p>表里有107条数据，我们只想要显示第32、33条数据怎么办呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">limit <span class="hljs-number">31</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>mysql8.0新特性 LIMIT … OFFSET …(两个数值调换位置)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span> <span class="hljs-number">31</span>,<span class="hljs-number">2</span> <br>等价于<br><span class="hljs-keyword">limit</span> <span class="hljs-number">2</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>查询员工表中工资最高的员工信息</p><p><img src="/assets/image-20230821185559252.png" alt="image-20230821185559252"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>聚合函数</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><p>聚合函数作用于一组数据，并对一组数据返回一个值。</p><h2 id="常见的聚合函数"><a href="#常见的聚合函数" class="headerlink" title="常见的聚合函数"></a>常见的聚合函数</h2><blockquote><p>AVG() &#x2F; SUM() 适用于数值类型的字段 二者均不会计算空值的数据</p><p>MAX() &#x2F; MIN() 适用于数值类型,字符串类型,日期时间类型的字段</p><p>COUNT()</p></blockquote><p>COUNT(常数或者*)表示该字段一共有多少条数据</p><p><img src="/assets/image-20230823151906922.png" alt="image-20230823151906922"></p><p>COUNT(具体字段)表示具体字段不为null的数量.</p><p><img src="/assets/image-20230823152255410.png" alt="image-20230823152255410"></p><blockquote><p>需要统计表中的记录数，使用COUNT(*)、COUNT(1)、COUNT(具体字段)哪个效率更高呢？</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">如果使用的是MyISAM存储引擎,则三者都是O(1)<br>如果使用的是InnoDB存储引擎,则COUNT(*) = COUNT(1) &gt; COUNT(字段)<br></code></pre></td></tr></table></figure><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p><img src="/assets/image-20230823155234307.png" alt="image-20230823155234307"></p><blockquote><p> 需求:查询各个部门的平均工资,最高工资</p></blockquote><p><img src="/assets/image-20230823155959401.png" alt="image-20230823155959401"><img src="/assets/image-20230823160030413.png" alt="image-20230823160030413"></p><blockquote><p>查询各个department_id,job_id的平均工资</p></blockquote><p><img src="/assets/image-20230823161025454.png" alt="image-20230823161025454"></p><blockquote><p>SELECT 中非组函数的字段必须声明在GROUP BY中,而GROUP BY的字段不一定要出现在SELECT中.</p><p>GROUP BY 声明在FROM后面,WHERE后面,ORDER BY 前面,LIMIT前面</p><p>WITH ROLLUP 使用该关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。使用时不能同时使用ORDER BY字句结果进行排序,即互斥</p></blockquote><h3 id="WITH-ROLLUP"><a href="#WITH-ROLLUP" class="headerlink" title="WITH ROLLUP"></a>WITH ROLLUP</h3><p><img src="/assets/image-20230823163809844.png" alt="image-20230823163809844"></p><p><img src="/assets/image-20230823163826297.png" alt="image-20230823163826297"></p><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><blockquote><p>在分组后进行过滤数据</p></blockquote><img src="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/image-20230823164511801.png" alt="image-20230823164511801" style="zoom: 67%;"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">1.如果过滤条件中使用了聚合函数，则必须使用HAVING来替换WHERE。否则，报错。<br>2.HAVING必须声明在GROUP BY后面<br>3.开发中使用HAVING的前提是SQL中使用了GROUP BY<br></code></pre></td></tr></table></figure><blockquote><p>查询部门id为10,20,30,40这四个部门中最高工资比10000高的部门</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询各个部门中最高工资比10000高的部门</span><br><span class="hljs-keyword">SELECT</span> D.department_name,<span class="hljs-built_in">MAX</span>(E.salary)<br><span class="hljs-keyword">FROM</span> employees E,departments D<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">AND</span> E.department_id <span class="hljs-keyword">IN</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> D.department_name<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">MAX</span>(E.salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span>;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">当过滤条件中有聚合函数时,则此过滤条件必须声明在HAVING中.<br>当过滤条件中没有聚合函数时,建议将此过滤条件声明在WHERE中.<br></code></pre></td></tr></table></figure><h2 id="WHERE与HAVING的对比"><a href="#WHERE与HAVING的对比" class="headerlink" title="WHERE与HAVING的对比"></a>WHERE与HAVING的对比</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">1.从适用范围上来讲，HAVING的适用范围更广。<br>2.如果过滤条件中没有聚合函数：这种情况下，WHERE的执行效率要高于HAVING<br>如果需要通过连接从关联表中获取需要的数据，WHERE是先筛选后连接，而HAVING是先连接后筛选。<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230824011421486.png" alt="image-20230824011421486"></p><h1 id="SQL底层执行原理-1"><a href="#SQL底层执行原理-1" class="headerlink" title="SQL底层执行原理(1)"></a>SQL底层执行原理(1)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TEST">SQL92<br>SELECT ...,...,...(存在聚合函数)<br>FROM ...,...,...<br>WHERE 多表连接条件 AND 不包含聚合函数过滤条件<br>GROUP BY ...,...<br>HAVING 包含聚合函数的过滤条件<br>ORDER BY ...,...(ASC/DESC)<br>LIMIT ...,...<br><br>---------------------------执行过程------------------------------<br><br><br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">SQL99<br>SELECT ...,...,...(存在聚合函数)<br>FROM ...(LEFT/RIGHT)JOIN...ON<br>多表的连接条件<br>...(LEFT/RIGHT)JOIN...ON...<br>WHERE 不包含聚合函数过滤条件<br>GROUP BY ...,...<br>HAVING 包含聚合函数的过滤条件<br>ORDER BY ...,...(ASC/DESC)<br>LIMIT ...,...<br><br>---------------------------执行过程------------------------------<br>FROM ...,... -&gt; ON -&gt; (LEFT/RIGHT JOIN) -&gt; WHERE -&gt; GROUP BY -&gt;HAVING -&gt; SELECT -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>加密和解密函数</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/7_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%87%BD%E6%95%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/7_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="加密与解密函数"><a href="#加密与解密函数" class="headerlink" title="加密与解密函数"></a>加密与解密函数</h1><p><img src="/assets/image-20230823141711763.png" alt="image-20230823141711763"></p><p>PASSWORD(8.0已弃用)</p><p>MD5,SHA不可逆加密</p><p>ENCODE,DECODE加解密(8.0已弃用)</p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单行函数</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/7_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/7_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h1><p> <a href="%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0.pdf">第07章_单行函数.pdf</a> </p><ul><li>操作数据对象</li><li>接受参数返回一个结果</li><li>只对一行进行变换</li><li>每行返回一个结果</li><li>可以嵌套</li><li>参数可以是一列或一个值</li></ul><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><p><img src="/assets/image-20230823121851527.png" alt="image-20230823121851527"></p><p><img src="/assets/image-20230823122242286.png" alt="image-20230823122242286"></p><p><img src="/assets/image-20230823122316253.png" alt="image-20230823122316253"></p><p><img src="/assets/image-20230823122346246.png" alt="image-20230823122346246"></p><p><img src="/assets/image-20230823122814958.png" alt="image-20230823122814958"></p><p><img src="/assets/image-20230823122849806.png" alt="image-20230823122849806"></p><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p><img src="/assets/image-20230823123009353.png" alt="image-20230823123009353"></p><p><img src="/assets/image-20230823123121051.png" alt="image-20230823123121051"></p><p><img src="/assets/image-20230823123143511.png" alt="image-20230823123143511"></p><p><img src="/assets/image-20230823123215146.png" alt="image-20230823123215146"></p><p><img src="/assets/image-20230823123233399.png" alt="image-20230823123233399"></p><p><img src="/assets/image-20230823123337083.png" alt="image-20230823123337083"></p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><img src="/assets/image-20230823124056660.png" alt="image-20230823124056660"></p><p><img src="/assets/image-20230823124114629.png" alt="image-20230823124114629"></p><blockquote><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote><h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><p><img src="/assets/image-20230823124255720.png" alt="image-20230823124255720"></p><h4 id="获取月份、星期、星期数、天数等函数"><a href="#获取月份、星期、星期数、天数等函数" class="headerlink" title="获取月份、星期、星期数、天数等函数"></a><strong>获取月份、星期、星期数、天数等函数</strong></h4><p><img src="/assets/image-20230823124441499.png" alt="image-20230823124441499"></p><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><p><img src="/assets/image-20230823124809750.png" alt="image-20230823124809750"></p><p><img src="/assets/image-20230823124913247.png" alt="image-20230823124913247"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 输出结果<span class="hljs-number">1</span> <br><span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 输出结果<span class="hljs-number">2</span><br><span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> 输出结果<span class="hljs-number">3</span><br><span class="hljs-keyword">ELSE</span> 输出结果<span class="hljs-number">4</span><br><span class="hljs-keyword">END</span>                   <span class="hljs-comment">----------------------------相当于java的if-else</span><br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">IFNULL</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;Hello Word&#x27;</span>)<br>-&gt;Hello Word<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;1 &gt; 0&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;2 &gt; 0&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;3 &gt; 0&#x27;</span><br><span class="hljs-keyword">END</span><br>-&gt;<span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;我是1&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;我是2&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;你是谁&#x27;</span><br><span class="hljs-keyword">END</span><br><br><span class="hljs-keyword">SELECT</span> employee_id,salary, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> salary&gt;=<span class="hljs-number">15000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;高薪&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary&gt;=<span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;潜力股&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary&gt;=<span class="hljs-number">8000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;屌丝&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;草根&#x27;</span> <span class="hljs-keyword">END</span> <span class="hljs-string">&quot;描述&quot;</span><br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7种SQL JOINS实现</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E4%B8%83%E7%A7%8DSQL_JOIN/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E4%B8%83%E7%A7%8DSQL_JOIN/</url>
    
    <content type="html"><![CDATA[<h1 id="7种SQL-JOINS"><a href="#7种SQL-JOINS" class="headerlink" title="7种SQL JOINS"></a>7种SQL JOINS</h1><p><img src="/assets/image-20230822155432532.png" alt="image-20230822155432532"></p><h2 id="UNION的使用"><a href="#UNION的使用" class="headerlink" title="UNION的使用"></a>UNION的使用</h2><p>利用JNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用JNION或UNION ALL关键字分隔。</p><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><p>返回两个查询的结果集的并集。去除重复记录</p><h3 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h3><p>返回两个查询的结果集的并集，不删除重复部分</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">注意：执行<span class="hljs-built_in">UNION</span> <span class="hljs-built_in">ALL</span>语句时所需要的资源比<span class="hljs-built_in">UNION</span>语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用JNION <span class="hljs-built_in">ALL</span>语句，以提高数据查询的效率。<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-keyword">UNION</span> <span class="hljs-operator">/</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-comment">-- 七种JOIN的实现</span><br><span class="hljs-comment">-- 中图 内连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id; #<span class="hljs-number">106</span><br><span class="hljs-comment">-- 左上图 左外连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id; #<span class="hljs-number">106</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">107</span><br><span class="hljs-comment">-- 右上图 右外连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id; #<span class="hljs-number">106</span> <span class="hljs-operator">+</span> <span class="hljs-number">16</span> <span class="hljs-operator">=</span> <span class="hljs-number">122</span><br><span class="hljs-comment">-- 左图 左外连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">-- 右图 右外连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">-- 左下图 满外连接</span><br><span class="hljs-comment">-- 左上图 UNION ALL 右图</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; #<span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">106</span> <span class="hljs-operator">+</span> <span class="hljs-number">16</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span><br><span class="hljs-comment">-- 右上图 UNION ALL 左图</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; #<span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">106</span> <span class="hljs-operator">+</span> <span class="hljs-number">16</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span><br><span class="hljs-comment">-- 右下图 满外连接</span><br><span class="hljs-comment">-- 左图 UNION ALL 右图</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; #<span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">16</span> <span class="hljs-operator">=</span> <span class="hljs-number">17</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>子查询（嵌套查询）</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/9_%E5%AD%90%E6%9F%A5%E8%AF%A2/%E5%AD%90%E6%9F%A5%E8%AF%A2%EF%BC%88%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%EF%BC%89/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/9_%E5%AD%90%E6%9F%A5%E8%AF%A2/%E5%AD%90%E6%9F%A5%E8%AF%A2%EF%BC%88%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="需求分析与问题解决"><a href="#需求分析与问题解决" class="headerlink" title="需求分析与问题解决"></a>需求分析与问题解决</h2><h3 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h3><p><img src="/assets/image-20230824160351727.png" alt="image-20230824160351727"></p><p>SQL中子查询的使用大大增强了SELECT查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集合）进行比较。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 谁的工资比Abel高</span><br><span class="hljs-comment">-- 方式1</span><br><span class="hljs-keyword">SELECT</span> last_name,salary<br><span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,salary<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">11000</span>;<br><span class="hljs-comment">-- 方式2 自连接</span><br><span class="hljs-keyword">SELECT</span> E1.last_name,E1.salary<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> employees E1<br><span class="hljs-keyword">ON</span> E.last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span> <span class="hljs-keyword">AND</span> E1.salary <span class="hljs-operator">&gt;</span> E.salary; <br><span class="hljs-comment">-- 方式3 子查询</span><br><span class="hljs-keyword">SELECT</span> last_name,salary<br><span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> (<br><span class="hljs-keyword">SELECT</span> salary<br><span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p><strong>称谓的规范</strong>：外查询（主查询），内查询（子查询）</p><ul><li>子查询在主查询之前一次执行完成</li><li>子查询的结果被主查询使用</li><li>子查询要包含在括号内</li><li>建议子查询放在比较条件的右侧，提高可读性</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul><h3 id="子查询的分类"><a href="#子查询的分类" class="headerlink" title="子查询的分类"></a>子查询的分类</h3><p>子查询可以分为单行子查询和多行子查</p><blockquote><p>子查询返回类型只有一行数据为单行子查询</p></blockquote><p>亦可分为相关（关联）子查询和不相关（非关联）子查询</p><blockquote><p>相关子查询：内查询是否被执行多次– 查询工资大于本部门平均工资的员工信息</p><p>不相关子查询：查询工资大于本公司平均工资的员工信息</p></blockquote><h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><p>单行运算符：略</p><blockquote><p>查询工资大于149号员工工资的员工的信息</p></blockquote><p><img src="/assets/image-20230825225711866.png" alt="image-20230825225711866"></p><blockquote><p>返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</p></blockquote><p><img src="/assets/image-20230825230808215.png" alt="image-20230825230808215"></p><blockquote><p>返回公司工资最少的员工的last_name,job_id,salary</p></blockquote><p><img src="/assets/image-20230826124549173.png" alt="image-20230826124549173"></p><blockquote><p>查询与141号员工的manager_id和department_id相同的其他员工employee_id,manager_id,department_id</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 方式1</span><br><span class="hljs-keyword">SELECT</span> employee_id,manager_id,department_id<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> manager_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">141</span><br>) <span class="hljs-keyword">AND</span> department_id <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> department_id <span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">141</span><br>) <span class="hljs-keyword">AND</span> employee_id <span class="hljs-operator">!=</span> <span class="hljs-number">141</span>;<br><span class="hljs-comment">-- 方式2</span><br><span class="hljs-keyword">SELECT</span> employee_id,manager_id,department_id<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> <br>(manager_id,department_id) <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> manager_id,department_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">141</span><br>) <span class="hljs-keyword">AND</span> employee_id <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">141</span> ;<br></code></pre></td></tr></table></figure><h3 id="HAVING子查询"><a href="#HAVING子查询" class="headerlink" title="HAVING子查询"></a>HAVING子查询</h3><blockquote><p>查询最低工资大于20号部门最低工资的部门id和其最低工资</p></blockquote><p><img src="/assets/image-20230826125423349.png" alt="image-20230826125423349"></p><blockquote><p>显式员工的employee_id,last_name和location。其中，若员工department_id与location_id为1800的department_id相同，则location为’Canada’,其余则为’USA’。</p></blockquote><p><img src="/assets/image-20230826132624542.png" alt="image-20230826132624542"></p><h3 id="子查询的空值问题"><a href="#子查询的空值问题" class="headerlink" title="子查询的空值问题"></a>子查询的空值问题</h3><p>子查询查询是空值</p><h3 id="非法使用子查询"><a href="#非法使用子查询" class="headerlink" title="非法使用子查询"></a>非法使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,last_name,salary,department_id <span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id);<br>## 不能用 <span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><h2 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h2><h3 id="多行比较操作符"><a href="#多行比较操作符" class="headerlink" title="多行比较操作符"></a>多行比较操作符</h3><p><img src="/assets/image-20230826133606676.png" alt="image-20230826133606676"></p><blockquote><p>题目：返回其它job_id中比job_id为’IT PROG’部门任一工资低的员工的员工号，姓名，job_id以及salary</p></blockquote><p><img src="/assets/image-20230826180240499.png" alt="image-20230826180240499"></p><blockquote><p>返回所有job_id中比job_id为’IT PROG’部门任一工资低的员工的员工号，姓名，job id以及salary</p></blockquote><p><img src="/assets/image-20230826180451746.png" alt="image-20230826180451746"></p><blockquote><p>查询平均工资最低的部门 聚合函数不允许嵌套使用</p></blockquote><p><img src="/assets/image-20230826213932828.png" alt="image-20230826213932828"></p><p><img src="/assets/image-20230826214634624.png" alt="image-20230826214634624"></p><h3 id="空值问题的处理"><a href="#空值问题的处理" class="headerlink" title="空值问题的处理"></a>空值问题的处理</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">-- 例如对department_id not in（123,99,null）即可看作是not(department_id =123 or department_id=99 or department_id=null)<br>-- 满足括号的所有条件， 进一步理解为(department_id != 123 and department_id!=99 and department_id != null)<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230826220110442.png" alt="image-20230826220110442"></p><p><img src="/assets/image-20230826220146087.png" alt="image-20230826220146087"></p><h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为关联子查询。相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。<br></code></pre></td></tr></table></figure><blockquote><p>查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</p></blockquote><p><img src="/assets/image-20230826222015328.png" alt="image-20230826222015328"></p><p><img src="/assets/image-20230826223921486.png" alt="image-20230826223921486"></p><blockquote><p>若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同id的员工的employee_id,last_name和其job_id</p></blockquote><p><img src="/assets/image-20230826231644906.png" alt="image-20230826231644906"></p><h3 id="EXISTS与NOT-EXISTS关键字"><a href="#EXISTS与NOT-EXISTS关键字" class="headerlink" title="EXISTS与NOT EXISTS关键字"></a>EXISTS与NOT EXISTS关键字</h3><ul><li><p>关联子查询通常也会和EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</p></li><li><p>如果在子查询中不存在满足条件的行</p><ul><li>条件返回FALSE</li><li>继续在子查询中查找</li></ul></li><li><p>如果在子查询中存在满足条件的行：</p><ul><li>不在子查询中继续查找</li><li>条件返回TRUE</li></ul></li><li><p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE,否则返回FALSE。</p><blockquote><p>查询公司管理者的employee_.id,last_name,job_id,department_id信息</p></blockquote><p><img src="/assets/image-20230827081547498.png" alt="image-20230827081547498"></p><blockquote><p>查询departments表中，不存在于employees:表中的部门的department_id和department_name</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询departments表中，不存在于employees表中的部门的department_id和department._name</span><br><span class="hljs-keyword">SELECT</span> department_id,department_name<br><span class="hljs-keyword">FROM</span> departments D<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-operator">=</span> D.department_id);<br><span class="hljs-comment">-- </span><br><span class="hljs-keyword">SELECT</span> D.department_id,D.department_name,E.department_id<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure></li></ul><h1 id="SQL底层执行原理-2"><a href="#SQL底层执行原理-2" class="headerlink" title="SQL底层执行原理(2)"></a>SQL底层执行原理(2)</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">SQL99<br>除了GROUP BY和LIMIT之外，其他位置都可声明子查询<br><br>SELECT ...,...,...(存在聚合函数)<br>FROM ...(LEFT/RIGHT)JOIN...ON<br>多表的连接条件<br>...(LEFT/RIGHT)JOIN...ON...<br>WHERE 不包含聚合函数过滤条件<br>GROUP BY ...,...<br>HAVING 包含聚合函数的过滤条件<br>ORDER BY ...,...(ASC/DESC)<br>LIMIT ...,...<br><br>---------------------------执行过程------------------------------<br>FROM ...,... -&gt; ON -&gt; (LEFT/RIGHT JOIN) -&gt; WHERE -&gt; GROUP BY -&gt;HAVING -&gt; SELECT -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>多表查询</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>多表查询也称为关联查询，它们之间有关联字段，可能之间建立了外键。例如员工表和部门表，之间依靠部门编号进行关联。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees,departments;   <br>#employees <span class="hljs-number">107</span>LINE     departments <span class="hljs-number">27</span>LINE    employees,departments <span class="hljs-number">2889</span>LINE<br></code></pre></td></tr></table></figure><p>为什么该语句输出有2889条数据呢？</p><blockquote><p>因为每一位员工都与所有的部门匹配，即笛卡尔积（交叉连接）错误。</p></blockquote><p>为什么会出现笛卡尔积错误呢？</p><blockquote><p>因为缺少了多表的连接条件。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 补充连接条件</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;  #<span class="hljs-number">106</span>LINE<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,department_name,department_id <span class="hljs-keyword">FROM</span> employees,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;<br>#报错：<span class="hljs-keyword">Column</span> <span class="hljs-string">&#x27;department_id&#x27;</span> <span class="hljs-keyword">in</span> field list <span class="hljs-keyword">is</span> ambiguous<br>#解释department_id在两个表中都有出现，因此需要表明是哪个表的department_id<br><span class="hljs-keyword">SELECT</span> employee_id,department_name,employees.department_id <span class="hljs-keyword">FROM</span> employees,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;<br></code></pre></td></tr></table></figure><p>建议多表查询时，每个字段前都指明其所在的表。</p><h2 id="给表起别名"><a href="#给表起别名" class="headerlink" title="给表起别名"></a>给表起别名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.employee_id,d.department_name,e.department_id <span class="hljs-keyword">FROM</span> employees e,departments d<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230822140937346.png" alt="image-20230822140937346"></p><blockquote><p>可以给表起别名，但起名之后必须在SELECT和WHERE中使用表的别名。</p></blockquote><p>查询员工的employee id,last_name,department_name,city</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> E.employee_id,E.last_name,D.department_name,L.city<br><span class="hljs-keyword">FROM</span> employees E,departments D,locations L<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">AND</span> D.location_id <span class="hljs-operator">=</span> L.location_id;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230822141634849.png" alt="image-20230822141634849"></p><blockquote><p>如果有n个表实现多表的查询，则至少需要n-1个连接条件</p></blockquote><h2 id="多表查询的分类"><a href="#多表查询的分类" class="headerlink" title="多表查询的分类"></a>多表查询的分类</h2><h3 id="等值连接-vs-非等值连接"><a href="#等值连接-vs-非等值连接" class="headerlink" title="等值连接 vs 非等值连接"></a>等值连接 vs 非等值连接</h3><blockquote><p> 查询格员工的等级</p></blockquote><p><img src="/assets/image-20230822145202125.png" alt="image-20230822145202125"></p><h3 id="自连接-vs-非自连接"><a href="#自连接-vs-非自连接" class="headerlink" title="自连接 vs 非自连接"></a>自连接 vs 非自连接</h3><blockquote><p>查询员工id姓名及其管理者的id姓名</p></blockquote><p><img src="/assets/image-20230822145746659.png" alt="image-20230822145746659"></p><h3 id="内连接-vs-外连接"><a href="#内连接-vs-外连接" class="headerlink" title="内连接 vs 外连接"></a>内连接 vs 外连接</h3><p>内连接 合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行</p><p><img src="/assets/image-20230822150711973.png" alt="image-20230822150711973"></p><p>外连接 合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表不匹配的行之外，还查到左表或右表中不匹配的行</p><h4 id="外连接的分类"><a href="#外连接的分类" class="headerlink" title="外连接的分类"></a>外连接的分类</h4><p><img src="/assets/image-20230822155432532.png" alt="image-20230822155432532"></p><h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><p>两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行</p><blockquote><p>查询’’所有的’’员工的last_name,department_name信息</p></blockquote><blockquote><p>SQL99语法中使用JOIN … ON的方式实现多表的查询。这种方式也能解决外连接的问题。MySQL是支持此种方式</p></blockquote><p><img src="/assets/image-20230822153802446.png" alt="image-20230822153802446"></p><h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><p>两个表在连接过程中除了返 回满足连接条件的行以外还返回右表中不满足条件的行</p><p><img src="/assets/image-20230822154844292.png" alt="image-20230822154844292"></p><h5 id="满外连接-MYSQL不支持FULL"><a href="#满外连接-MYSQL不支持FULL" class="headerlink" title="满外连接(MYSQL不支持FULL)"></a>满外连接(MYSQL不支持FULL)</h5><p>UNION ALL</p><p> <a href="%E4%B8%83%E7%A7%8DSQL_JOIN.md">七种SQL_JOIN.md</a> </p><h3 id="SQL99新特性1-NATURAL-JOIN"><a href="#SQL99新特性1-NATURAL-JOIN" class="headerlink" title="SQL99新特性1 NATURAL JOIN"></a>SQL99新特性1 NATURAL JOIN</h3><p>它会帮你白动查询两张连接表中<code>所有相同的字段</code>，然后进行、等值连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> E.employee_id,E.manager_id,D.department_name,D.manager_id<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br></code></pre></td></tr></table></figure><h4 id="SQL99新特性2-USING"><a href="#SQL99新特性2-USING" class="headerlink" title="SQL99新特性2 USING"></a>SQL99新特性2 USING</h4><p>当我们进行连接的时候，SQL99还支持使用USING指定数据表里的同名字段进行等值连接。但是只能配合JOIN，但不适用于自连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> E.employee_id,E.manager_id,D.department_name,D.manager_id<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br>## 等价<br><span class="hljs-keyword">SELECT</span> E.employee_id,E.manager_id,D.department_name,D.manager_id<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">USING</span>(department_id)<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>我们要控制连接表的数量。多表连接就相当于嵌套for循环一样，非常消耗资源，会让SQL查询性能下降得很严<br>重，因此不要连接不必要的表。在许多DBMS中，也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止join。需要join的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的<br>字段需要有索引。<br>说明：即使双表join也要注意表索引、SQL性能。<br>来源：阿里巴巴《Java开发手册》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
